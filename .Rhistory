"light blue",  # Negative
"red"          # False positive
),
labels = c(
700,
35,
300,
15
)
)
# FDR comparison
fdr_1_plot <- plot(
euler(
list(
"True Positives" = 336:1000,
"False Positives" = 1:15
),
shape = "ellipse"
),
fills = c(
"green", # Positive
"red"          # False Positive
),
labels = c(
685,
15
)
)
# FWER comparison
fwer_1_plot <- plot(
euler(
pos_neg_1_vd <- list(
"Negative" = 1:300,
"False Positive" = 1:15
),
shape = "ellipse"
),
fills = c(
"light blue",  # Negative
"red"          # False positive
),
labels = c(
300,
15
)
)
# 500 positives vs. 500 negatives
# Overview
pos_neg_2_plot <- plot(
euler(
list(
"Positives" = 501:1000,
"False Negatives" = 501:525,
"Negatives" = 1:500,
"False Positives" = 1:25
),
shape = "ellipse"
),
fills = c("dark green","purple","light blue", "red"),
labels = c(
500,
25,
500,
25
)
)
#FDR
fdr_2_plot <- plot(
euler(
list(
"True Positives" = 526:1000,
"False Positives" = 1:25
),
shape = "ellipse"
),
fills = c("green","red"),
labels = c(
475,
25
)
)
#FWER
fwer_2_plot <- plot(
euler(
list(
"Negatives" = 1:500,
"False Positives" = 1:25
),
shape = "ellipse"
),
fills = c("light blue", "red"),
labels = c(
500,
25
)
)
# 200 positives vs. 800 negatives
pos_neg_3_plot <-plot(
euler(
list(
"Positives" = 801:1000,
"False Negatives" = 801:810,
"Negatives" = 1:800,
"False Positives" = 1:40
),
shape = "ellipse"
),
fills = c("dark green","purple","light blue", "red"),
labels = c(
200,
10,
800,
40
)
)
fdr_3_plot <- plot(
euler(
list(
"Positives" = 811:1000,
"False Positives" = 1:40
),
shape = "ellipse"
),
fills = c("green","red"),
labels = c(
190,
40
)
)
fwer_3_plot <- plot(
euler(
list(
"Negatives" = 1:800,
"False Positives" = 1:40
),
shape = "ellipse"
),
fills = c("light blue","red"),
labels = c(
800,
40
)
)
library(ggpubr)
ggarrange(
pos_neg_1_plot,
fdr_1_plot,
fwer_1_plot,
pos_neg_2_plot,
fdr_2_plot,
fwer_2_plot,
pos_neg_3_plot,
fdr_3_plot,
fwer_3_plot,
ncol = 3,
nrow = 3,
labels = c("","FDR","FWER")
)
library(eulerr)
set.seed(1)
neg_vd <- list(
"True Negatives" = 1:100,
"False Positives" = c(1:5)
)
plot(euler(neg_vd, shape = "ellipse"),  fills = c("light green","pink"))
bh_df <- data.frame(
p     = c(.001,.01,.025,.04,.045,.06,.08,.1,.12,.3),
rank  = 1:10,
m     = 10,
alpha = (k/m) * Q
)
bh_df <- data.frame(
p     = c(.001,.01,.025,.04,.045,.06,.08,.1,.12,.3),
rank  = 1:10,
tests = 10,
alpha = (rank/m) * Q
)
bh_df <- data.frame(
p     = c(.001,.01,.025,.04,.045,.06,.08,.1,.12,.3),
rank  = 1:10,
tests = 10,
alpha = (rank/tests) * Q
)
bh_df <- data.frame(
p     = c(.001,.01,.025,.04,.045,.06,.08,.1,.12,.3),
rank  = 1:10,
tests = 10
)
bh_df$alpha = (rank/tests) * Q
bh_df$alpha = (bh_df$rank/bh_df$tests) * Q
bh_df <- data.frame(
p     = c(.001,.01,.025,.04,.045,.06,.08,.1,.12,.3),
rank  = 1:10,
tests = 10,
fdr   = .1
)
bh_df$alpha = (bh_df$rank/bh_df$tests) * bh_df$Q
bh_df$alpha = (bh_df$rank/bh_df$tests) * bh_df$fdr
knitr::kable(bh_df)
View(bh_df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
ecog_data = list.files(
path = "data/",
pattern = ".csv", #"*freeview-*",
full.names = TRUE
)
start.time <- Sys.time()
#freeview_files %>%
map_df(
ecog_data,
~mutate(
read_csv(.),
file= str_split(
str_match(
.,
"/(.*?)\\."
)[,2] ,
"-"
)[[1]][1]
)
) -> ecog_trials
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
##
# Preprocessing to allow for more elegant comparisons within tidyverse
# calculate latencies for cancellation and silhouettes task for each click since the last click
ecog_trials$latency_between = NA
for(i in 2:length(ecog_trials$username)){
ecog_trials$latency_between[i] = ecog_trials$latency[i] - ecog_trials$latency[i-1]
}
# OIP - confirm which color the participant selected
ecog_trials$color_chosen = NA
ecog_trials$color_chosen[ecog_trials$img_response == "left"] = "blue"
ecog_trials$color_chosen[ecog_trials$img_response == "middle"] = "green"
ecog_trials$color_chosen[ecog_trials$img_response == "right"] = "orange"
ecog_trials$distractor_chosen = ecog_trials$distractor_color == ecog_trials$color_chosen
# Stroop - fix the missing first trial
ecog_trials$big_side[
ecog_trials$left_side == "../User/Stimuli/stroop_images/tractor.png" &
ecog_trials$right_side == "../User/Stimuli/stroop_images/camera.png" &
ecog_trials$phasetype == "stroop" &
!is.na(ecog_trials$left_side == "../User/Stimuli/stroop_images/tractor.png" &
ecog_trials$right_side == "../User/Stimuli/stroop_images/camera.png" &
ecog_trials$phasetype == "stroop")
] = "left"
# # Stroop - identify left or right as smaller
# ecog_trials$small_side = ""
# ecog_trials$small_side[ecog_trials$left_height == "200px"] = "left"
# ecog_trials$small_side[ecog_trials$right_height == "200px"] = "right"
# Stroop - confirm whether trial is CC, CI, IC or II
ecog_trials$stroop_cong = NA
ecog_trials$stroop_cong[ecog_trials$target_side != ecog_trials$big_side] = "congruent"
ecog_trials$stroop_cong[ecog_trials$target_side == ecog_trials$big_side] = "incongruent"
ecog_trials$stroop_cong_comb = NA
for(i in 2:length(ecog_trials$username)){
if(!is.na(ecog_trials$stroop_cong[i] == "congruent") & !is.na(ecog_trials$stroop_cong[i-1] == "congruent")){
if(ecog_trials$stroop_cong[i] == "congruent" & ecog_trials$stroop_cong[i-1] == "congruent" & ecog_trials$phasetype[i] == "stroop"){
ecog_trials$stroop_cong_comb[i] = "cc"
} else if(ecog_trials$stroop_cong[i] == "congruent" & ecog_trials$stroop_cong[i-1] == "incongruent" & ecog_trials$phasetype[i] == "stroop"){
ecog_trials$stroop_cong_comb[i] = "ci"
} else if(ecog_trials$stroop_cong[i] == "incongruent" & ecog_trials$stroop_cong[i-1] == "congruent" & ecog_trials$phasetype[i] == "stroop"){
ecog_trials$stroop_cong_comb[i] = "ic"
} else if(ecog_trials$stroop_cong[i] == "incongruent" & ecog_trials$stroop_cong[i-1] == "incongruent" & ecog_trials$phasetype[i] == "stroop"){
ecog_trials$stroop_cong_comb[i] = "ii"
}
}
}
ecog_trials %>%
group_by(username) %>%
summarise(
# paired association 1
paired_1_same_correct = sum(correct == 1 & same == "yes", na.rm = T),
paired_1_same_incorrect = sum(correct == 0 & same == "yes", na.rm = T),
paired_1_different_correct = sum(correct == 1 & same == "no", na.rm = T),
paired_1_different_incorrect = sum(correct == 0 & same == "no", na.rm = T),
paired_1_living_correct = sum(correct == 1 & same == "yes" & left_living == "yes", na.rm = T),
paired_1_nonliving_correct = sum(correct == 1 & same == "yes" & left_living == "no", na.rm = T),
paired_1_mixed_correct = sum(correct == 1 & same == "no", na.rm = T),
## RTs
paired_1_living_rt = median(post_0_rt_ms[correct == 1 & same == "yes" & left_living == "yes"], na.rm = T),
paired_1_nonliving_rt = median(post_0_rt_ms[correct == 1 & same == "yes" & left_living == "no"], na.rm = T),
paired_1_mixed_rt = median(post_0_rt_ms[correct == 1 & same == "no"], na.rm = T),
# Cancellation
cancellation_bells_selected  = sum(this_icon == "bi-bell-fill" & selected == "selected", na.rm = T),
cancellation_bells_unselected  = sum(this_icon == "bi-bell-fill" & selected == "unselected", na.rm = T),
cancellation_others_selected = sum(
this_icon != "bi-bell-fill" & this_icon != "" & selected == "selected",
na.rm = T
),
cancellation_others_unselected = sum(
this_icon != "bi-bell-fill" & this_icon != "" & selected == "unselected",
na.rm = T
),
cancellation_bells_mean_valid_col = mean(col_no[
this_icon != "bi-bell-fill" & this_icon != "" & selected == "selected"
], na.rm = T),
cancellation_rt_median = median(latency_between[
this_icon != "bi-bell-fill" & this_icon != "" & selected == "selected"
], na.rm = T),
cancellation_rt_sd = sd(latency_between[
this_icon != "bi-bell-fill" & this_icon != "" & selected == "selected"
], na.rm = T),
# Object in place
shape_img_accuracy = sum(img_accuracy == 1 & prompt == "shape", na.rm = T),
shape_img_trials = sum(img_accuracy == 1 & prompt == "shape" | img_accuracy == 0 & prompt == "shape", na.rm = T),
# shape_img_rt =
location_img_accuracy = sum(img_accuracy == 1 & prompt == "location", na.rm = T),
location_img_trials = sum(
img_accuracy == 1 & prompt == "location" | img_accuracy == 0 & prompt == "location",
na.rm = T
),
location_swap_error = sum(
img_accuracy == 0 &
prompt == "location" &
distractor_chosen == FALSE,
na.rm = T
),
location_generic_error = sum(
img_accuracy == 0 &
prompt == "location" &
distractor_chosen == TRUE,
na.rm = T
),
shape_swap_error = sum(
img_accuracy == 0 &
prompt == "shape" &
distractor_chosen == FALSE,
na.rm = T
),
shape_generic_error = sum(
img_accuracy == 0 &
prompt == "shape" &
distractor_chosen == TRUE,
na.rm = T
),
# Silhouettes
silhouettes_correct_selected      = sum(correct == 1 & selected == "selected" & is.na(this_icon),   na.rm = T),
silhouettes_correct_unselected    = sum(correct == 1 & selected == "unselected" & is.na(this_icon), na.rm = T),
silhouettes_incorrect_selected    = sum(correct == 0 & selected == "selected" & is.na(this_icon),   na.rm = T),
silhouettes_incorrect_unselected  = sum(correct == 0 & selected == "unselected" & is.na(this_icon), na.rm = T),
silhouettes_rt_median = median(latency_between[
correct == 1 &
selected == "selected" &
is.na(this_icon)
], na.rm = T),
silhouettes_rt_sd = sd(latency_between[
correct == 1 &
selected == "selected" &
is.na(this_icon)
], na.rm = T),
# Stroop
## NOTE that this is inverted as the original code incorrectly identified the larger image as the correct image, not the smaller image
stroop_cong_correct     = sum(image_accuracy == 0 & stroop_cong == "congruent", na.rm = T),
stroop_cong_incorrect   = sum(image_accuracy == 1 & stroop_cong == "congruent", na.rm = T),
stroop_cong_trials      = sum(stroop_cong == "congruent", na.rm = T),
stroop_incong_correct   = sum(image_accuracy == 0 & stroop_cong == "congruent", na.rm = T),
stroop_incong_incorrect = sum(image_accuracy == 1 & stroop_cong == "congruent", na.rm = T),
stroop_incong_trials    = sum(target_side != big_side & phasetype == "stroop", na.rm = T),
stroop_cong_rt_mean = mean(image_rt[image_accuracy == 0 & stroop_cong == "congruent"], na.rm = T),
stroop_incong_rt_mean = mean(image_rt[image_accuracy == 0 & stroop_cong == "congruent"], na.rm = T),
stroop_cong_rt_median = median(image_rt[image_accuracy == 0 & stroop_cong == "congruent"], na.rm = T),
stroop_incong_rt_median = median(image_rt[image_accuracy == 0 & stroop_cong == "congruent"], na.rm = T),
stroop_cong_rt_sd = sd(image_rt[image_accuracy == 0 & stroop_cong == "congruent"], na.rm = T),
stroop_incong_rt_sd = sd(image_rt[image_accuracy == 0 & stroop_cong == "congruent"], na.rm = T),
stroop_cong_acc_adj_rt = stroop_cong_rt_mean/(stroop_cong_correct/32),
stroop_incong_acc_adj_rt = stroop_incong_rt_mean/(stroop_incong_correct/32),
# Gratton metrics
stroop_cc_correct = sum(image_accuracy == 0 & stroop_cong_comb == "cc", na.rm = T),
stroop_cc_rt_mean = mean(image_rt[image_accuracy == 0 & stroop_cong_comb == "cc"], na.rm = T),
stroop_cc_rt_median = median(image_rt[image_accuracy == 0 & stroop_cong_comb == "cc"], na.rm = T),
stroop_cc_rt_sd = sd(image_rt[image_accuracy == 0 & stroop_cong_comb == "cc"], na.rm = T),
stroop_cc_acc_adj_rt = stroop_cc_rt_mean/(stroop_cc_correct/sum(ecog_trials$stroop_cong_comb == "cc", na.rm = T)),
stroop_ci_correct = sum(image_accuracy == 0 & stroop_cong_comb == "ci", na.rm = T),
stroop_ci_rt_mean = mean(image_rt[image_accuracy == 0 & stroop_cong_comb == "ci"], na.rm = T),
stroop_ci_rt_median = median(image_rt[image_accuracy == 0 & stroop_cong_comb == "ci"], na.rm = T),
stroop_ci_rt_sd = sd(image_rt[image_accuracy == 0 & stroop_cong_comb == "ci"], na.rm = T),
stroop_ci_acc_adj_rt = stroop_ci_rt_mean/(stroop_ci_correct/sum(ecog_trials$stroop_cong_comb == "ci", na.rm = T)),
stroop_ic_correct = sum(image_accuracy == 0 & stroop_cong_comb == "ic", na.rm = T),
stroop_ic_rt_mean = mean(image_rt[image_accuracy == 0 & stroop_cong_comb == "ic"], na.rm = T),
stroop_ic_rt_median = median(image_rt[image_accuracy == 0 & stroop_cong_comb == "ic"], na.rm = T),
stroop_ic_rt_sd = sd(image_rt[image_accuracy == 0 & stroop_cong_comb == "ic"], na.rm = T),
stroop_ic_acc_adj_rt = stroop_ic_rt_mean/(stroop_ic_correct/sum(ecog_trials$stroop_cong_comb == "ic", na.rm = T)),
stroop_ii_correct = sum(image_accuracy == 0 & stroop_cong_comb == "ii", na.rm = T),
stroop_ii_rt_mean = mean(image_rt[image_accuracy == 0 & stroop_cong_comb == "ii"], na.rm = T),
stroop_ii_rt_median = median(image_rt[image_accuracy == 0 & stroop_cong_comb == "ii"], na.rm = T),
stroop_ii_rt_sd = sd(image_rt[image_accuracy == 0 & stroop_cong_comb == "ii"], na.rm = T),
stroop_ii_acc_adj_rt = stroop_ii_rt_mean/(stroop_ii_correct/sum(ecog_trials$stroop_cong_comb == "ii", na.rm = T)),
# Symbol-symbol
symbol_correct = sum(accuracy == 1 & phasetype == "symbol_symbol" & stage == "symbol_symbol_main", na.rm = T),
symbol_incorrect = sum(accuracy == 0 & phasetype == "symbol_symbol" & stage == "symbol_symbol_main", na.rm = T),
symbol_0_0 = sum(response_no == 0 & correct_response == 0, na.rm = T),
symbol_0_1 = sum(response_no == 0 & correct_response == 1, na.rm = T),
symbol_0_2 = sum(response_no == 0 & correct_response == 2, na.rm = T),
symbol_0_3 = sum(response_no == 0 & correct_response == 3, na.rm = T),
symbol_0_4 = sum(response_no == 0 & correct_response == 4, na.rm = T),
symbol_0_5 = sum(response_no == 0 & correct_response == 5, na.rm = T),
symbol_0_6 = sum(response_no == 0 & correct_response == 6, na.rm = T),
symbol_0_7 = sum(response_no == 0 & correct_response == 7, na.rm = T),
symbol_0_8 = sum(response_no == 0 & correct_response == 8, na.rm = T),
symbol_1_0 = sum(response_no == 1 & correct_response == 0, na.rm = T),
symbol_1_1 = sum(response_no == 1 & correct_response == 1, na.rm = T),
symbol_1_2 = sum(response_no == 1 & correct_response == 2, na.rm = T),
symbol_1_3 = sum(response_no == 1 & correct_response == 3, na.rm = T),
symbol_1_4 = sum(response_no == 1 & correct_response == 4, na.rm = T),
symbol_1_5 = sum(response_no == 1 & correct_response == 5, na.rm = T),
symbol_1_6 = sum(response_no == 1 & correct_response == 6, na.rm = T),
symbol_1_7 = sum(response_no == 1 & correct_response == 7, na.rm = T),
symbol_1_8 = sum(response_no == 1 & correct_response == 8, na.rm = T),
symbol_2_0 = sum(response_no == 2 & correct_response == 0, na.rm = T),
symbol_2_1 = sum(response_no == 2 & correct_response == 1, na.rm = T),
symbol_2_2 = sum(response_no == 2 & correct_response == 2, na.rm = T),
symbol_2_3 = sum(response_no == 2 & correct_response == 3, na.rm = T),
symbol_2_4 = sum(response_no == 2 & correct_response == 4, na.rm = T),
symbol_2_5 = sum(response_no == 2 & correct_response == 5, na.rm = T),
symbol_2_6 = sum(response_no == 2 & correct_response == 6, na.rm = T),
symbol_2_7 = sum(response_no == 2 & correct_response == 7, na.rm = T),
symbol_2_8 = sum(response_no == 2 & correct_response == 8, na.rm = T),
symbol_3_0 = sum(response_no == 3 & correct_response == 0, na.rm = T),
symbol_3_1 = sum(response_no == 3 & correct_response == 1, na.rm = T),
symbol_3_2 = sum(response_no == 3 & correct_response == 2, na.rm = T),
symbol_3_3 = sum(response_no == 3 & correct_response == 3, na.rm = T),
symbol_3_4 = sum(response_no == 3 & correct_response == 4, na.rm = T),
symbol_3_5 = sum(response_no == 3 & correct_response == 5, na.rm = T),
symbol_3_6 = sum(response_no == 3 & correct_response == 6, na.rm = T),
symbol_3_7 = sum(response_no == 3 & correct_response == 7, na.rm = T),
symbol_3_8 = sum(response_no == 3 & correct_response == 8, na.rm = T),
symbol_4_0 = sum(response_no == 4 & correct_response == 0, na.rm = T),
symbol_4_1 = sum(response_no == 4 & correct_response == 1, na.rm = T),
symbol_4_2 = sum(response_no == 4 & correct_response == 2, na.rm = T),
symbol_4_3 = sum(response_no == 4 & correct_response == 3, na.rm = T),
symbol_4_4 = sum(response_no == 4 & correct_response == 4, na.rm = T),
symbol_4_5 = sum(response_no == 4 & correct_response == 5, na.rm = T),
symbol_4_6 = sum(response_no == 4 & correct_response == 6, na.rm = T),
symbol_4_7 = sum(response_no == 4 & correct_response == 7, na.rm = T),
symbol_4_8 = sum(response_no == 4 & correct_response == 8, na.rm = T),
symbol_5_0 = sum(response_no == 5 & correct_response == 0, na.rm = T),
symbol_5_1 = sum(response_no == 5 & correct_response == 1, na.rm = T),
symbol_5_2 = sum(response_no == 5 & correct_response == 2, na.rm = T),
symbol_5_3 = sum(response_no == 5 & correct_response == 3, na.rm = T),
symbol_5_4 = sum(response_no == 5 & correct_response == 4, na.rm = T),
symbol_5_5 = sum(response_no == 5 & correct_response == 5, na.rm = T),
symbol_5_6 = sum(response_no == 5 & correct_response == 6, na.rm = T),
symbol_5_7 = sum(response_no == 5 & correct_response == 7, na.rm = T),
symbol_5_8 = sum(response_no == 5 & correct_response == 8, na.rm = T),
symbol_6_0 = sum(response_no == 6 & correct_response == 0, na.rm = T),
symbol_6_1 = sum(response_no == 6 & correct_response == 1, na.rm = T),
symbol_6_2 = sum(response_no == 6 & correct_response == 2, na.rm = T),
symbol_6_3 = sum(response_no == 6 & correct_response == 3, na.rm = T),
symbol_6_4 = sum(response_no == 6 & correct_response == 4, na.rm = T),
symbol_6_5 = sum(response_no == 6 & correct_response == 5, na.rm = T),
symbol_6_6 = sum(response_no == 6 & correct_response == 6, na.rm = T),
symbol_6_7 = sum(response_no == 6 & correct_response == 7, na.rm = T),
symbol_6_8 = sum(response_no == 6 & correct_response == 8, na.rm = T),
symbol_7_0 = sum(response_no == 7 & correct_response == 0, na.rm = T),
symbol_7_1 = sum(response_no == 7 & correct_response == 1, na.rm = T),
symbol_7_2 = sum(response_no == 7 & correct_response == 2, na.rm = T),
symbol_7_3 = sum(response_no == 7 & correct_response == 3, na.rm = T),
symbol_7_4 = sum(response_no == 7 & correct_response == 4, na.rm = T),
symbol_7_5 = sum(response_no == 7 & correct_response == 5, na.rm = T),
symbol_7_6 = sum(response_no == 7 & correct_response == 6, na.rm = T),
symbol_7_7 = sum(response_no == 7 & correct_response == 7, na.rm = T),
symbol_7_8 = sum(response_no == 7 & correct_response == 8, na.rm = T),
symbol_8_0 = sum(response_no == 8 & correct_response == 0, na.rm = T),
symbol_8_1 = sum(response_no == 8 & correct_response == 1, na.rm = T),
symbol_8_2 = sum(response_no == 8 & correct_response == 2, na.rm = T),
symbol_8_3 = sum(response_no == 8 & correct_response == 3, na.rm = T),
symbol_8_4 = sum(response_no == 8 & correct_response == 4, na.rm = T),
symbol_8_5 = sum(response_no == 8 & correct_response == 5, na.rm = T),
symbol_8_6 = sum(response_no == 8 & correct_response == 6, na.rm = T),
symbol_8_7 = sum(response_no == 8 & correct_response == 7, na.rm = T),
symbol_8_8 = sum(response_no == 8 & correct_response == 8, na.rm = T),
# Paired association 2
pa_2_targets      = sum(category_response == "target_image", na.rm = T),
pa_2_foils        = sum(category_response == "foil_image_1" | category_response == "foil_image_2", na.rm = T),
pa_2_distractions = sum(category_response == "dist_image_1" | category_response == "dist_image_2", na.rm = T),
pa_2_rt_mean   = mean(post_0_rt_ms[category_response == "target_image"], na.rm = T),
pa_2_rt_median = median(post_0_rt_ms[category_response == "target_image"], na.rm = T),
pa_2_rt_sd     = sd(post_0_rt_ms[category_response == "target_image"], na.rm = T)
)-> ecog_participants
## Paired_associates_1 RT_SE
ecog_participants$paired_1_living_rt_se = ecog_participants$paired_1_living_rt/sqrt(ecog_participants$paired_1_living_correct)
ecog_participants$paired_1_nonliving_rt_se = ecog_participants$paired_1_nonliving_rt/sqrt(ecog_participants$paired_1_nonliving_correct)
ecog_participants$paired_1_mixed_rt_se = ecog_participants$paired_1_mixed_rt/sqrt(ecog_participants$paired_1_mixed_correct)
## Cancellation SE
cancellation_rt_se = ecog_participants$cancellation_rt_sd/sqrt(ecog_participants$cancellation_bells_selected)
## Silhouettes SE
silhouettes_rt_se = ecog_participants$silhouettes_rt_sd/sqrt(ecog_participants$silhouettes_correct_selected)
## Cancellation - dealing with repetitions before processing
# Remove repetitions
ecog_trials_cancellation_unduplicated <- ecog_trials[
!duplicated(ecog_trials[,c(
"username",
"this_icon",
"row_no",
"col_no")
]),
]
ecog_trials %>%
group_by(username) %>%
summarise(
cancellation_bells_mean_valid_col_undup = mean(col_no[
this_icon != "bi-bell-fill" & this_icon != "" & selected == "selected"
], na.rm = T)
) -> canc_dupless
ecog_participants$cancellation_bells_mean_valid_col_undup <- canc_dupless$cancellation_bells_mean_valid_col_undup
# Paired association 2
ecog_participants$pa_2_rt_se = ecog_participants$pa_2_rt_sd/sqrt(ecog_participants$pa_2_targets)
View(ecog_participants)
ecog_participants$pa_2_distractions
write.csv(ecog_participants, "ecog_participants.csv")
