maths_summarised$color = "green"
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1 ,
colors =color
)
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1 ,
colors =~ color
)
# reset the "sig" column
maths_summarised$sig = "no"
maths_summarised$color = "red"
comparisons = length(heights) * length(shoe_size)
for(height in heights){
for(shoe_size in shoe_sizes){
exp_group_scores = maths_scores$maths[maths_scores$height == height & maths_scores$shoe == shoe_size]
con_group_scores = maths_scores$maths[maths_scores$height != height & maths_scores$shoe != shoe_size]
this_t.test <- t.test(exp_group_scores, con_group_scores)
# here is where the new alpha threshold is applied
if(this_t.test$p.value < .05/comparisons){
maths_summarised$sig[maths_summarised$height == height & maths_summarised$shoe == shoe_size] = "yes"
maths_summarised$color[maths_summarised$height == height & maths_summarised$shoe == shoe_size] = "#005599"
}
}
}
library(plotly)
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1 ,
colors =~ color
)
# Set a seed number so that the randomisation won't change with each update of the textbook (if this isn't done, then there is a .95^144 chance that the below example will not work)
set.seed(1)
participants_per_condition = 20
heights = 10:21 * 7.5
shoe_sizes = 4:15
maths_scores <- data.frame(
height =rep(heights, each = length(heights)* participants_per_condition),
shoe = rep(shoe_sizes, length(shoe_sizes) * participants_per_condition),
maths  = rnorm(participants_per_condition * length(shoe_sizes) * length(heights), mean = 75, sd = 15)
)
## Analyses
library(tidyverse)
maths_scores %>%
group_by(height, shoe) %>%
summarise(
score = mean(maths),
sd   = sd(maths),
se   = sd(maths)/length(maths),
sig  = "no",
color="red"
) -> maths_summarised
for(height in heights){
for(shoe_size in shoe_sizes){
exp_group_scores = maths_scores$maths[maths_scores$height == height & maths_scores$shoe == shoe_size]
con_group_scores = maths_scores$maths[maths_scores$height != height & maths_scores$shoe != shoe_size]
this_t.test <- t.test(exp_group_scores, con_group_scores)
if(this_t.test$p.value < .05){
maths_summarised$sig[maths_summarised$height == height & maths_summarised$shoe == shoe_size] = "yes"
maths_summarised$color[maths_summarised$height == height & maths_summarised$shoe == shoe_size] = "#005599"
}
}
}
library(plotly)
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1,
colors =~ color
)
# Set a seed number so that the randomisation won't change with each update of the textbook (if this isn't done, then there is a .95^144 chance that the below example will not work)
set.seed(1)
participants_per_condition = 20
heights = 10:21 * 7.5
shoe_sizes = 4:15
maths_scores <- data.frame(
height =rep(heights, each = length(heights)* participants_per_condition),
shoe = rep(shoe_sizes, length(shoe_sizes) * participants_per_condition),
maths  = rnorm(participants_per_condition * length(shoe_sizes) * length(heights), mean = 75, sd = 15)
)
## Analyses
library(tidyverse)
maths_scores %>%
group_by(height, shoe) %>%
summarise(
score = mean(maths),
sd   = sd(maths),
se   = sd(maths)/length(maths),
sig  = "no",
color="red"
) -> maths_summarised
for(height in heights){
for(shoe_size in shoe_sizes){
exp_group_scores = maths_scores$maths[maths_scores$height == height & maths_scores$shoe == shoe_size]
con_group_scores = maths_scores$maths[maths_scores$height != height & maths_scores$shoe != shoe_size]
this_t.test <- t.test(exp_group_scores, con_group_scores)
if(this_t.test$p.value < .05){
maths_summarised$sig[maths_summarised$height == height & maths_summarised$shoe == shoe_size] = "yes"
maths_summarised$color[maths_summarised$height == height & maths_summarised$shoe == shoe_size] = "#005599"
}
}
}
library(plotly)
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1,
colors =~ color
)
maths_summarised$color
# reset the "sig" column
maths_summarised$sig = "no"
maths_summarised$color = "green"
comparisons = length(heights) * length(shoe_size)
for(height in heights){
for(shoe_size in shoe_sizes){
exp_group_scores = maths_scores$maths[maths_scores$height == height & maths_scores$shoe == shoe_size]
con_group_scores = maths_scores$maths[maths_scores$height != height & maths_scores$shoe != shoe_size]
this_t.test <- t.test(exp_group_scores, con_group_scores)
# here is where the new alpha threshold is applied
if(this_t.test$p.value < .05/comparisons){
maths_summarised$sig[maths_summarised$height == height & maths_summarised$shoe == shoe_size] = "yes"
maths_summarised$color[maths_summarised$height == height & maths_summarised$shoe == shoe_size] = "#005599"
}
}
}
library(plotly)
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1 ,
colors =~ color
)
# reset the "sig" column
maths_summarised$sig = "no"
maths_summarised$color = "green"
comparisons = length(heights) * length(shoe_size)
for(height in heights){
for(shoe_size in shoe_sizes){
exp_group_scores = maths_scores$maths[maths_scores$height == height & maths_scores$shoe == shoe_size]
con_group_scores = maths_scores$maths[maths_scores$height != height & maths_scores$shoe != shoe_size]
this_t.test <- t.test(exp_group_scores, con_group_scores)
# here is where the new alpha threshold is applied
if(this_t.test$p.value < .05/comparisons){
maths_summarised$sig[maths_summarised$height == height & maths_summarised$shoe == shoe_size] = "yes"
maths_summarised$color[maths_summarised$height == height & maths_summarised$shoe == shoe_size] = "blue"
}
}
}
library(plotly)
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1 ,
colors =~ color
)
# Set a seed number so that the randomisation won't change with each update of the textbook (if this isn't done, then there is a .95^144 chance that the below example will not work)
set.seed(1)
participants_per_condition = 20
heights = 10:21 * 7.5
shoe_sizes = 4:15
maths_scores <- data.frame(
height =rep(heights, each = length(heights)* participants_per_condition),
shoe = rep(shoe_sizes, length(shoe_sizes) * participants_per_condition),
maths  = rnorm(participants_per_condition * length(shoe_sizes) * length(heights), mean = 75, sd = 15)
)
## Analyses
library(tidyverse)
maths_scores %>%
group_by(height, shoe) %>%
summarise(
score = mean(maths),
sd   = sd(maths),
se   = sd(maths)/length(maths),
sig  = "no",
color="red"
) -> maths_summarised
for(height in heights){
for(shoe_size in shoe_sizes){
exp_group_scores = maths_scores$maths[maths_scores$height == height & maths_scores$shoe == shoe_size]
con_group_scores = maths_scores$maths[maths_scores$height != height & maths_scores$shoe != shoe_size]
this_t.test <- t.test(exp_group_scores, con_group_scores)
if(this_t.test$p.value < .05){
maths_summarised$sig[maths_summarised$height == height & maths_summarised$shoe == shoe_size] = "yes"
maths_summarised$color[maths_summarised$height == height & maths_summarised$shoe == shoe_size] = "blue"
}
}
}
library(plotly)
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1,
colors =~ color
)
maths_summarised$color
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1,
colors =~ color(color)
)
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1,
marker = list(color = ~color)
)
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
#color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1,
marker = list(color = ~color)
)
library(plotly)
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1
)
"No": "red",
pal <- c("red", "blue")
pal <- setNames(pal, c("No", "Yes"))
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1,
colors = pal
)
pal <- c("red", "blue")
pal <- setNames(pal, c("no", "yes"))
library(plotly)
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1,
colors = pal
)
pal <- c("red", "#005599")
pal <- setNames(pal, c("no", "yes"))
library(plotly)
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1,
colors = pal
)
# Set a seed number so that the randomisation won't change with each update of the textbook (if this isn't done, then there is a .95^144 chance that the below example will not work)
set.seed(1)
participants_per_condition = 20
heights = 10:21 * 7.5
shoe_sizes = 4:15
maths_scores <- data.frame(
height =rep(heights, each = length(heights)* participants_per_condition),
shoe = rep(shoe_sizes, length(shoe_sizes) * participants_per_condition),
maths  = rnorm(participants_per_condition * length(shoe_sizes) * length(heights), mean = 75, sd = 15)
)
## Analyses
library(tidyverse)
maths_scores %>%
group_by(height, shoe) %>%
summarise(
score = mean(maths),
sd   = sd(maths),
se   = sd(maths)/length(maths),
sig  = "no",
color="red"
) -> maths_summarised
for(height in heights){
for(shoe_size in shoe_sizes){
exp_group_scores = maths_scores$maths[maths_scores$height == height & maths_scores$shoe == shoe_size]
con_group_scores = maths_scores$maths[maths_scores$height != height & maths_scores$shoe != shoe_size]
this_t.test <- t.test(exp_group_scores, con_group_scores)
if(this_t.test$p.value < .05){
maths_summarised$sig[maths_summarised$height == height & maths_summarised$shoe == shoe_size] = "yes"
maths_summarised$color[maths_summarised$height == height & maths_summarised$shoe == shoe_size] = "blue"
}
}
}
# setting yes and no colors
yes_no_colors <- c("red", "#005599")
yes_no_colors <- setNames(pal, c("no", "yes"))
library(plotly)
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1,
colors = yes_no_colors
)
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1 ,
colors = yes_no_colors
)
# reset the "sig" column
maths_summarised$sig = "no"
maths_summarised$color = "green"
comparisons = length(heights) * length(shoe_size)
for(height in heights){
for(shoe_size in shoe_sizes){
exp_group_scores = maths_scores$maths[maths_scores$height == height & maths_scores$shoe == shoe_size]
con_group_scores = maths_scores$maths[maths_scores$height != height & maths_scores$shoe != shoe_size]
this_t.test <- t.test(exp_group_scores, con_group_scores)
# here is where the new alpha threshold is applied
if(this_t.test$p.value < .05/comparisons){
maths_summarised$sig[maths_summarised$height == height & maths_summarised$shoe == shoe_size] = "yes"
maths_summarised$color[maths_summarised$height == height & maths_summarised$shoe == shoe_size] = "blue"
}
}
}
library(plotly)
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1 ,
colors = yes_no_colors
)
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1,
colors = yes_no_colors
)
05/144
.05/144
1- (1-.05)^144
1- (1-.05)^144
1- (1-.05)^(1/144)
1- (1-.05)^(1/2)
.95^2
1- (1-.05)^(1/2)
.95^2
.95^(1/2)
.95^(1/2)
.95^2
.95^(1/2)
.975^2
1 - .975^2
1-(.05/144)
(1-(.05/144)) ^ 144
1 - (1-(.05/144)) ^ 144
.975^2
1 - .975^2
1 - (1-.05)^.5
sidak_alpha <- 1 - (1-.05)^.5
(1-sidak_alpha)^2
.975^2
2 = 3 - 1
2 == 3 - 1
2(3/2) == 3(3/2) - 1(3/2)
2^(3/2) == 3^(3/2) - 1^(3/2)
2 ^ 2 * 2 ^ .5
(2 ^ 2) * (2 ^ .5)
4^.5
sidak_alpha =  1 - (1 - .05)^(1/144)
sidak_alpha
# reset the "sig" column
maths_summarised$sig = "no"
maths_summarised$color = "green"
sidak_alpha =  1 - (1 - .05)^(1/144)
comparisons = length(heights) * length(shoe_size)
for(height in heights){
for(shoe_size in shoe_sizes){
exp_group_scores = maths_scores$maths[maths_scores$height == height & maths_scores$shoe == shoe_size]
con_group_scores = maths_scores$maths[maths_scores$height != height & maths_scores$shoe != shoe_size]
this_t.test <- t.test(exp_group_scores, con_group_scores)
# here is where the new alpha threshold is applied
if(this_t.test$p.value < sidak_alpha){
maths_summarised$sig[maths_summarised$height == height & maths_summarised$shoe == shoe_size] = "yes"
maths_summarised$color[maths_summarised$height == height & maths_summarised$shoe == shoe_size] = "blue"
}
}
}
plot_ly(
data = maths_summarised,
x=~height,
y=~shoe,
z=~score,
color=~sig,
error_z = list(array=~se),
type = "scatter3d",
mode = "markers",
size = 1,
colors = yes_no_colors
)
1 - (1 - .05)*(1 - .025)
1 - (1 - .05)* (1 - .025) * .05
(1 - (1 - .05)* (1 - .025)) * .05
.05*.025
.05*.025 + .05 * .025
(1-.975 * .975)
(1-.975 * .95)
