---
title: "General Linear Models and Sum of Squares"
format: 
  html:  
    code-fold: false
editor: visual
---

## What are general linear models?

General linear models allow you to analyse data in which the **dependent** variable is continuous. For example, if you are analysing the height of a group of individuals, you might use one of the following analyses:

-   **t-test**, comparisons between two conditions e.g. are males taller than females?

-   **regression**, one or more predictors of a single outcome e.g. does foot size, weight etc. predict height? (Note that **correlations** are equivalent to a regression with a single predictor)

-   **ANOVA**, comparisons between 3 or more conditions or between multiple categorical factors, e.g. are there differences in height between sexes and nationalities?

**Linear** refers to the **dependent variable** being continuous.

**General** refers to the fact that the **independent variables** can both be continuous (e.g. regression) or categorical (e.g. t-test or ANOVA).

In **general linear models** all analyses involve creating a model, and capturing what is and isn't explained by the model (i.e. the **error** of the model). All analyses in general linear models can be formulated as:

$$
Data = Model + Error
$$

Data: The dependent variable in your analysis Model: A model which predicts a phenomenon. This could be multiple independent variables. Error: What data isn't explained by the model.

## Dummy vs. effect coding for categorical variables in a model

General Linear Models need numerical values for the predictors. As categorical variables (e.g. Sex) don't have a numeric value by default, we have to substitute the categories with numbers:

-   *Effect* coding can be used when you have a binary categorical variable, and you allocate one level 1 and the other -1. For example, you could allocate all females the score 1, and all non-female participants -1. A disadvantage of this approach is that it works best when you have binary categorical variable, but doesn't work as well when you have 3 or more levels. For example, coding female, male and non-binary sex doesn't work well with effect coding.
-   *Dummy* coding involves allocating a 1 if someone is in a cateogory, and 0 if they are outside of the category. For example, you could allocate 1 to all your female participants, and 0 to all participants who aren't female to a variable "sex_female". An advantage of this approach is that you have flexibility to have more than 2 levels, such as having "sex_female", "sex_male" and "sex_nonbinary" as variables that are all either 1 or 0.

## Mean as the simplest model of data

If you want to estimate what someone's life expectancy would be in 2007, you could look at the mean life expectancy using the gapminder data. In terms of how this corresponds to the above model:

$$
Data = Model + Error
$$

$$
estimatedLifeExpectancy = mean(lifeExpectancy) + Error
$$

::: panel-tabset
## R

```{r}
library(gapminder)
# create a new data frame that only focuses on data from 2007
gapminder_2007 <- subset(
  gapminder,   # the data set
  year == 2007     
)

mean(gapminder_2007$lifeExp)
```

## Python

```{python}
#| eval: false
# load the gapminder module and import the gapminder dataset
from gapminder import gapminder

# create a new data frame that only focuses on data from 2007
gapminder_2007 = gapminder.loc[gapminder['year'] == 2007]

gapminder_2007['lifeExp'].mean()
```
:::

```         
67.00742253521126
```

$$
estimatedLifeExpectancy = 67.01 + Error
$$

Which could be visualised as:

::: panel-tabset
## R

```{r}
library(ggplot2)
ggplot(
  gapminder_2007, aes(x=rank(lifeExp), y=lifeExp)
) + 
  geom_jitter() +
  geom_hline(yintercept = mean(gapminder_2007$lifeExp), color="blue") +
  geom_segment(
    aes(
      xend = rank(lifeExp),
      yend = mean(lifeExp),
      color = "resid"
    )
  ) +
  theme(legend.position = "none")

```

## Python

```{python}
#| eval: false

gapminder_2007["lifeExp_rank"] = gapminder_2007["lifeExp"].rank()

fig, ax = plt.subplots(figsize =(7, 5))

#scatter plot for the dataset
plt.scatter(gapminder_2007["lifeExp_rank"], gapminder_2007["lifeExp"], color='black', s=10)
# only one line may be specified; full height
plt.axhline(y=gapminder_2007["lifeExp"].mean(), color='blue', ls='-')

plt.vlines(x=gapminder_2007["lifeExp_rank"],ymin=gapminder_2007["lifeExp"], ymax=gapminder_2007["lifeExp"].mean(), colors='red', lw=0.5)

# add title on the x-axis
plt.xlabel("rank(lifeExp)")

# add title on the y-axis
plt.ylabel("Life Expectancy")
plt.show()
```
:::

![Plot of Mean rank(lifeExp) and residuals](generalLinearModels-Figure1.png){fig-align="left" width="700" height="500"}

*Fig. 1.*

In English, the above model and figure allow you to predict that anyone's life expectancy will be 67 years. However, as you can also see, there's a huge amount of error, i.e. variance in life expectancy that is not explained by the model. These errors can be squared and summed to give the **sum of squares**, a statistic of how much error there is around the model:

$$
SS = \sum(Y_i-\bar{Y})^2
$$

Which can be visualised as follows:

::: panel-tabset
## R

```{r}
ggplot(
  gapminder_2007, 
  aes(
    x=rank(lifeExp), 
    # y is the square of the difference between each data point and the mean across all data poins. Once these are summed you will get the sum of squares.
    y=(lifeExp-mean(lifeExp))^2
  )
) + 
  geom_point() +
  geom_segment(
    aes(
      xend = rank(lifeExp),
      yend = 0,
      color = "resid"
    )
  ) +
  theme(legend.position = "none")
```

## Python

```{python}
#| eval: false

fig, ax = plt.subplots(figsize =(7, 5))

#scatter plot for the dataset
plt.scatter(gapminder_2007["lifeExp_rank"], (gapminder_2007["lifeExp"]-gapminder_2007["lifeExp"].mean())**2, color='black', s=10)

# vertical lines
plt.vlines(x=gapminder_2007["lifeExp_rank"],ymin=0, ymax=(gapminder_2007["lifeExp"]-gapminder_2007["lifeExp"].mean())**2, colors='red', lw=0.5)

# add title on the x-axis
plt.xlabel("rank(lifeExp)")

# add title on the y-axis
plt.ylabel("(Life Expectancy - mean(Life Expectancy))^2")

# show plot
plt.show()
```
:::

![Plot of squared residuals](generalLinearModels-Figure2.png){fig-align="left" width="700" height="500"}

*Fig. 2.*

You can directly compare **fig. 1. and fig. 2.** to see how much error is associated with each data point compared to the model. Fig. 2. is positive because it is the distance of the data-point from the mean squared. If you added together all the **squares (pink lines)** in fig. 2. that would give you the **sum of squares.**

As you may have guessed, it is possible to have more precise models that have less error, and thus a smaller **sum of squares**. The sum of squares around the mean is also the **total sum of squares,** and the **total variance**. When we calculate the proportion of the variance that a model explains, we are comparing it to this **variance around the mean.**

Let's explore those possibilities now.

## T-Tests

T-tests are restricted to comparisons between 2 conditions/groups, so we will restrict the Gapminder data to allow a comparison between 2 continents. To see if life expectancy was different if you are born in Europe compared to the Americas, let's first check what the sum of squares is when you just use the **mean** as the model of life expectancy across these contents:

::: panel-tabset
## R

```{r}
gapminder_americas_europe <- subset(
  gapminder_2007,   # the data set
  continent == "Europe" | continent == "Americas"
)

ggplot(
  gapminder_americas_europe, aes(x=rank(lifeExp), y=lifeExp)
) + 
  geom_point() +
  geom_hline(yintercept = mean(gapminder_americas_europe$lifeExp), color="blue") +
  geom_segment(
    aes(
      xend = rank(lifeExp),
      yend = mean(lifeExp),
      color = "resid"
    )
  ) +
  theme(legend.position = "none")

```

## Python

```{python}
#| eval: false

gapminder_americas_europe = gapminder_2007.loc[(gapminder_2007['continent'] == "Europe") | (gapminder_2007['continent'] == "Americas")]

gapminder_americas_europe["lifeExp_rank"] = gapminder_americas_europe["lifeExp"].rank()

fig, ax = plt.subplots(figsize =(7, 5))

#scatter plot for the dataset
plt.scatter(gapminder_americas_europe["lifeExp_rank"], gapminder_americas_europe["lifeExp"], color='black', s=10)
# only one line may be specified; full height
plt.axhline(y=gapminder_americas_europe["lifeExp"].mean(), color='blue', ls='-')

plt.vlines(x=gapminder_americas_europe["lifeExp_rank"],ymin=gapminder_americas_europe["lifeExp"], ymax=gapminder_americas_europe["lifeExp"].mean(), colors='red', lw=0.5)

# add title on the x-axis
plt.xlabel("rank(lifeExp)")

# add title on the y-axis
plt.ylabel("lifeExp")

plt.show()

```
:::

*Fig. 3.* The errors around the mean of life expectancy across Europe and American countries.

![Plot with the errors around the mean of life expectancy across Europe and American countries](generalLinearModels-Figure3.png){fig-align="left" width="700" height="500"}

Once we square the errors in the pink lines above, we'll get the **squares:**

::: panel-tabset
## R

```{r}
ggplot(
  gapminder_americas_europe, 
  aes(
    x=rank(lifeExp), 
    # y is the square of the difference between each data point and the mean across all data poins. Once these are summed you will get the sum of squares.
    y=(lifeExp-mean(lifeExp))^2
  )
) + 
  geom_point() +
  geom_segment(
    aes(
      xend = rank(lifeExp),
      yend = 0,
      color = "resid"
    )
  ) +
  theme(legend.position = "none")

sum((gapminder_americas_europe$lifeExp - mean(gapminder_americas_europe$lifeExp))^2)

```

## Python

```{python}
#| eval: false
fig, ax = plt.subplots(figsize =(7, 5))

#scatter plot for the dataset
plt.scatter(gapminder_americas_europe["lifeExp_rank"], (gapminder_americas_europe["lifeExp"]-gapminder_americas_europe["lifeExp"].mean())**2, color='black', s=10)
# only one line may be specified; full height

plt.vlines(x=gapminder_americas_europe["lifeExp_rank"],ymin=0, ymax=(gapminder_americas_europe["lifeExp"]-gapminder_americas_europe["lifeExp"].mean())**2, colors='red', lw=0.5)

# add title on the x-axis
plt.xlabel("rank(lifeExp)")

# add title on the y-axis
plt.ylabel("(Life Expectancy - mean(Life Expectancy))^2")
plt.show()

sum((gapminder_americas_europe["lifeExp"]-gapminder_americas_europe["lifeExp"].mean())**2)
```
:::

![Plot with the errors around the mean of life expectancy across Europe and American countries](generalLinearModels-Figure4.png){fig-align="left" width="700" height="500"}

```         
953.4477649818183
```

And when you add all of these together:

$$
SumOfSquares = \sum(Y_i-\bar{Y})^2 = 953.4478
$$

So if the model we create for a t-test would result in a smaller **sum of squares** then that suggests it's a more precise model for estimating life expectancy than simply using the **mean** as a model. This is because this would mean there's less **error** in this model. Let's model this using a t-test. For this we will need to dummy code country:

::: panel-tabset
## R

```{r}
# create a column to place 1 or -1 for each row dependent on the country
contEffect = NA
contEffect[gapminder_americas_europe$continent == "Europe"] = 1
contEffect[gapminder_americas_europe$continent == "Americas"] = -1
gapminder_americas_europe = cbind(contEffect,gapminder_americas_europe)
rmarkdown::paged_table(head(gapminder_americas_europe))
```

## Python

```{python}
#| eval: false

gapminder_americas_europe = gapminder_2007.loc[(gapminder_2007['continent'] == "Europe") | (gapminder_2007['continent'] == "Americas")]
gapminder_americas_europe["contEffect"]=0
gapminder_americas_europe["contEffect"].loc[(gapminder_americas_europe['continent'] == "Europe")]=1
gapminder_americas_europe["contEffect"].loc[(gapminder_americas_europe['continent'] == "Americas")]=-1
cols = list(gapminder_americas_europe.columns)
cols = list(gapminder_americas_europe.columns)
cols = cols[len(cols)-1:len(cols):1]+cols[0:-1:1]
gapminder_americas_europe = gapminder_americas_europe[cols]
print(tabulate(gapminder_americas_europe[:6], headers=gapminder_americas_europe.head(), tablefmt="fancy_grid",showindex=False))
```
:::

![Table](generalLinearModels-Table1.png){fig-align="left" height="300"}

Now that we have dummy coded the continent, we can create a new model to try to predict an individual's life expectancy based on which continent they are from

$$
Y = intercept + \beta * dummyVariable + Error
$$

$$
lifeExp = mean(lifeExp) + \beta * contEffect + Error
$$

-   Y being the predicted life expectancy.

-   $\bar{Y}$ being the mean life expectancy regardless of continent. For a t-test this is also the $intercept$.

-   $\beta$ being how much to adjust the prediction based on which continent the person is from

-   $contEffect$ being 1 (Europe) or -1 (Americas) to reflect which continent the participant is from

-   $Error$ being any error in the prediction not captured by the model

To get the $intercept$ and $\beta$ for the above formula let's use the lm function in R:

::: panel-tabset
## R

```{r}
continent_ttest <- lm(lifeExp ~ contEffect, gapminder_americas_europe)

continent_ttest$coefficients[1] 
continent_ttest$coefficients[2]


gapminder_americas_europe$t_fit = continent_ttest$coefficients[1] + # intercept
  continent_ttest$coefficients[2]                       * # gradient
  gapminder_americas_europe$contEffect


ggplot(gapminder_americas_europe, aes(x = contEffect, y = lifeExp)) +
  geom_segment(
    position = "jitter",
    #arrow = arrow(length = unit(0.01, "npc"),ends = "first"),
    aes(
      xend = contEffect,
      yend = t_fit,
      color = "resid"
    )
  ) + 
  geom_segment(aes(
    x = -1.9, 
    xend = -.1, 
    y = -1 * continent_ttest$coefficients[2] + continent_ttest$coefficients[1],
    yend = -1 * continent_ttest$coefficients[2] + continent_ttest$coefficients[1]),
    color = "blue"
  ) + 
  geom_segment(
    aes(
      x = 0.1, 
      xend = 1.9, 
      y = 1 * continent_ttest$coefficients[2] + continent_ttest$coefficients[1],
      yend = 1 * continent_ttest$coefficients[2] + continent_ttest$coefficients[1]
    ),
    color = "blue"
  ) + 
  geom_segment(
    aes(
      x = - 1.9,
      xend = 1.9,
      y = mean(gapminder_americas_europe$lifeExp),
      yend = mean(gapminder_americas_europe$lifeExp)
    ),
    color = "dark green"
  )
```

## Python

```{python}
#| eval: false

from scipy import stats

# convert 'contEffect' to type category
gapminder_americas_europe['contEffect'] = gapminder_americas_europe['contEffect'].astype('category')

# lm 'contEffect' ~ 'lifeExp'
continent_ttest = stats.linregress(gapminder_americas_europe['contEffect'],gapminder_americas_europe['lifeExp'])

# show results of lm
continent_ttest

gapminder_americas_europe["contEffect"]=0
gapminder_americas_europe["contEffect"].loc[(gapminder_americas_europe['continent'] == "Europe")]=1
gapminder_americas_europe["contEffect"].loc[(gapminder_americas_europe['continent'] == "Americas")]=-1

gapminder_americas_europe['t_fit'] = continent_ttest.intercept +continent_ttest.slope * gapminder_americas_europe['contEffect']

gapminder_americas_europe['t_res_square'] = (gapminder_americas_europe['lifeExp'] - gapminder_americas_europe['t_fit'])**2

# calculate 'lifeExp' mean for 'contEffect' ==-1
m1 = gapminder_americas_europe["lifeExp"][gapminder_americas_europe['contEffect'] == -1].mean()

# calculate 'lifeExp' mean for 'contEffect' ==1
m2 = gapminder_americas_europe["lifeExp"][gapminder_americas_europe['contEffect'] == 1].mean()

# repeat lifeExp' mean for 'contEffect' ==-1
m11=np.repeat(m1, len(gapminder_americas_europe["lifeExp"][gapminder_americas_europe['contEffect'] == -1]), axis=0)

# repeat lifeExp' mean for 'contEffect' ==1
m22=np.repeat(m2, len(gapminder_americas_europe["lifeExp"][gapminder_americas_europe['contEffect'] == 1]), axis=0)

# create x coordinates for 'contEffect' ==-1
x1 = np.arange(-1.98, -.05, 0.08)

# create x coordinates for 'contEffect' ==1
x2 = np.arange(0.05, 1.98, 0.065)


fig, ax = plt.subplots(figsize =(10, 7))
ax.set_ylim([60, 80])
plt.axhline(y=gapminder_americas_europe["lifeExp"].mean(), color='green', ls='-')
plt.hlines(y=m1,xmin=-1.99, xmax=-.04, colors='blue', lw=0.5)
plt.hlines(y=m2,xmin=1.99, xmax=.04, colors='blue', lw=0.5)
plt.vlines(x= x1,ymin=gapminder_americas_europe["lifeExp"][gapminder_americas_europe['contEffect'] == -1], ymax=m11, colors='red', lw=0.5)
plt.vlines(x= x2,ymin=gapminder_americas_europe["lifeExp"][gapminder_americas_europe['contEffect'] == 1], ymax=m22, colors='red', lw=0.5)

# add title on the x-axis
plt.xlabel("contEffect")

# add title on the y-axis
plt.ylabel("lifeExp")

plt.show()
```
:::

```         
LinregressResult(slope=2.020240000000001, intercept=75.62836, rvalue=0.4832076439158285, pvalue=0.00018637488941351192, stderr=0.502794193121279, intercept_stderr=0.5027941931212789)
```

![Plot with the errors around the mean of life expectancy across Europe and American countries](generalLinearModels-Figure5.png){fig-align="left" width="700" height="500"}

*Fig. X. Countries in the americas are dummy coded as -1 and countries in Europe are dummy coded as 1. Note that jittering has been used to help visualise variation within continents, and so all countries in Americas had a* $contEffect$ score of -1, even if the jittering above makes it look like participants from Europe had slightly different $contEffect$ values to each other.

So now that we've visualised the predictions and the error, lets summarise these errors with their sum of squares:

::: panel-tabset
## R

```{r}
#temp_summary <- summary(lm(lifeExp ~ contEffect, data = gapminder_americas_europe))
summary(aov(lifeExp ~ contEffect, data = gapminder_americas_europe))

# between
overall_mean <- mean(gapminder_americas_europe$lifeExp)
europe_mean <- mean(gapminder_americas_europe$lifeExp[gapminder_americas_europe$contEffect == 1])
america_mean <- mean(gapminder_americas_europe$lifeExp[gapminder_americas_europe$contEffect == -1])
ss_between <- 
  sum(gapminder_americas_europe$contEffect == 1) * (europe_mean - overall_mean)^2 +
  sum(gapminder_americas_europe$contEffect == -1) * (america_mean - overall_mean)^2
  
top_half = ss_between

ss_within = (
  sum((gapminder_americas_europe$lifeExp[gapminder_americas_europe$contEffect == 1] - europe_mean)^2) + 
  sum((gapminder_americas_europe$lifeExp[gapminder_americas_europe$contEffect == -1] - america_mean)^2)
)
  
bottom_half = (ss_within/(length(gapminder_americas_europe$lifeExp) - 2))

top_half/bottom_half

# Compare with a t-test

t.test(
  gapminder_americas_europe$lifeExp[gapminder_americas_europe$contEffect == 1],
  gapminder_americas_europe$lifeExp[gapminder_americas_europe$contEffect == -1],
  var.equal = T
)


4.018^2
# look at a t-distribution compared to an f-distribution

```

## Python

```{python}
#| eval: false

import statsmodels.api as sm
from statsmodels.formula.api import ols

model = ols('lifeExp ~ contEffect', data = gapminder_americas_europe).fit()
aov_table = sm.stats.anova_lm(model, typ=2)
aov_table

# between
overall_mean = gapminder_americas_europe['lifeExp'].mean()
europe_mean = gapminder_americas_europe['lifeExp'][gapminder_americas_europe['contEffect'] == 1].mean()

america_mean = gapminder_americas_europe['lifeExp'][gapminder_americas_europe['contEffect'] == -1].mean()

ss_between =(sum(gapminder_americas_europe['contEffect'] == 1) * (europe_mean - overall_mean)**2) + (sum(gapminder_americas_europe['contEffect'] == -1) * (america_mean - overall_mean)**2)

top_half = ss_between

ss_within = (sum((gapminder_americas_europe['lifeExp'][gapminder_americas_europe['contEffect'] == 1] - europe_mean)**2)+ sum((gapminder_americas_europe['lifeExp'][gapminder_americas_europe['contEffect'] == -1] - america_mean)**2))

bottom_half = (ss_within/(len(gapminder_americas_europe['lifeExp']) - 2))

top_half/bottom_half

# Compare with a t-test
from scipy.stats import ttest_ind

t_test = ttest_ind(gapminder_americas_europe['lifeExp'][gapminder_americas_europe['contEffect'] == 1],gapminder_americas_europe['lifeExp'][gapminder_americas_europe['contEffect'] == -1])
t_test
t_test.statistic **2
```
:::

![Table](generalLinearModels-Table2.png){fig-align="left" height="100"}

```         
Ttest_indResult(statistic=4.018025720342183, pvalue=0.00018637488941352037)

16.144530689331322
```

So the new sum of squares is 730.8276, which is smaller than it was when we just used the mean regardless of continent (953.4478) which also summarises the **total variance** (around the mean). In fact, we can use these 2 numbers to calculate the $r^2$ value (i.e. what proportion of the variance around the mean is explained by the model). The amount of variance explained by the model can be calculated by:

$$
totalSumOfSquares - modelSumOfSquares = totalError - modelError
$$

This allows us to calculate an r-value and thus a p-value:

::: panel-tabset
## R

```{r}
this_r2 = 1 - sum(gapminder_americas_europe$t_res_squared)/sum((gapminder_americas_europe$lifeExp - mean(gapminder_americas_europe$lifeExp))^2)
this_r = sqrt(this_r2)
this_r
t.test(
  gapminder_americas_europe$lifeExp[gapminder_americas_europe$contEffect == 1],
  gapminder_americas_europe$lifeExp[gapminder_americas_europe$contEffect == -1],
  var.equal = T
)
summary(aov(lifeExp ~ contEffect, gapminder_americas_europe))
this_r2
```

## Python

```{python}
#| eval: false
import statsmodels.api as sm
from statsmodels.formula.api import ols
import math

this_r2 = 1- sum(gapminder_americas_europe['t_res_square'])/ (sum((gapminder_americas_europe['lifeExp'] - gapminder_americas_europe['lifeExp'].mean())**2))
this_r=math.sqrt(this_r2)
this_r
t_test = ttest_ind(gapminder_americas_europe['lifeExp'][gapminder_americas_europe['contEffect'] == 1],gapminder_americas_europe['lifeExp'][gapminder_americas_europe['contEffect'] == -1])
t_test

model = ols('lifeExp ~ contEffect', data = gapminder_americas_europe).fit()
aov_table = sm.stats.anova_lm(model, typ=2)
aov_table

this_r2
```
:::

You may notice above that the manually calculated $r^2$ value is identical to the "Multiple R-Squared", rather than the "Adjusted R-squared". So what's the difference between r-squared and adjusted r-squared?

### Effect sizes (eta-squared and partial eta-squared)

::: panel-tabset
## R

```{r}
summary(aov(lifeExp ~ contEffect, gapminder_americas_europe))
summary(lm(lifeExp ~ contEffect, gapminder_americas_europe))

222.62 /(222.62 +13.79)


```

## Python

```{python}
#| eval: false

t_test
aov_table
222.62 /(222.62 +13.79)
```
:::

```         
0.941669134131382
```

::: panel-tabset
## R

```{r}
male_female_height <- data.frame(
  sex = c("male","male","female","female","female","female","female","female"),
  height = c(2.5,2.2,1.5,1.5,1.4,1.4,1.3,1.3),
  sex_dummy = c(-1,-1,1,1,1,1,1,1)
)
mean(male_female_height$height[male_female_height$sex == "male"])
mean(male_female_height$height[male_female_height$sex == "female"])
summary(lm(height ~ sex_dummy, data = male_female_height))
```

## Python

```{python}
#| eval: false
male_female_height = {
    'sex': ["male","male","female","female","female","female","female","female"],
    'height': [2.5,2.2,1.5,1.5,1.4,1.4,1.3,1.3],
    'sex_dummy': [-1,-1,1,1,1,1,1,1]
}
male_female_height = pd.DataFrame(male_female_height)
male_female_height['height'][male_female_height['sex'] == "male"].mean()
male_female_height['height'][male_female_height['sex'] == "female"].mean()

import statsmodels.formula.api as smf
model2 = smf.ols(formula='height ~ sex_dummy', data=male_female_height).fit()
model2.summary()
```
:::

```         
2.35

1.4000000000000001
```

![Tale](generalLinearModels-Table3.png){fig-align="left" height="500" width="500"}

To show that we've achieved the same as a t-test, let's run a between subjects t-test that assumes the variance is equal between the groups (which is an assumption of a general linear model), and see if the p-values are the same:

::: panel-tabset
## R

```{r}
#953.4478/730.8276
continent_ttest <- t.test(
  gapminder_americas_europe$lifeExp[gapminder_americas_europe$contEffect == -1],
  gapminder_americas_europe$lifeExp[gapminder_americas_europe$contEffect == 1],
  # general linear models assume the variance between conditions is equal
  var.equal = T
)
continent_model <- summary(lm(lifeExp ~ contEffect, gapminder_americas_europe))

continent_ttest$p.value
continent_model$coefficients[2,4] # p-value for the continent as a predictor
```

## Python

```{python}
#| eval: false

continent_ttest = t_test = ttest_ind(gapminder_americas_europe['lifeExp'][gapminder_americas_europe['contEffect'] == 1],gapminder_americas_europe['lifeExp'][gapminder_americas_europe['contEffect'] == -1])

continent_ttest.pvalue

```
:::

There are some advantages of conducting a t-test using the "lm" functionality:

-   You can capture residuals

-   You have more flexibility to make more complex models

Let's now see how we can proceed if we have a more complex design, i.e. 3 or more levels and/or more than 1 factor, using ANOVAs.

::: panel-tabset
## R

```{r}
## Automatic calculation
gapminder_3_continents <- subset(
  gapminder_2007, 
  continent == "Europe" | continent == "Americas" | continent == "Africa"
)

summary(aov(lifeExp ~ factor(continent), data = gapminder_3_continents))



## Manual calculation
ss_between = (
  ((mean(gapminder_3_continents$lifeExp[gapminder_3_continents$continent=="Europe"])-mean(gapminder_3_continents$lifeExp))^2) * sum(gapminder_3_continents$continent=="Europe") +
  ((mean(gapminder_3_continents$lifeExp[gapminder_3_continents$continent=="Americas"])-mean(gapminder_3_continents$lifeExp))^2) * sum(gapminder_3_continents$continent=="Americas") +
  ((mean(gapminder_3_continents$lifeExp[gapminder_3_continents$continent=="Africa"])-mean(gapminder_3_continents$lifeExp))^2) * sum(gapminder_3_continents$continent=="Africa") 
)

totalSS = sum((gapminder_3_continents$lifeExp - mean(gapminder_3_continents$lifeExp))^2)

shortcut_ss_within = totalSS - ss_between

ss_within_long = sum(
  (gapminder_3_continents$lifeExp[gapminder_3_continents$continent=="Europe"]-mean(gapminder_3_continents$lifeExp[gapminder_3_continents$continent=="Europe"]))^2,
  (gapminder_3_continents$lifeExp[gapminder_3_continents$continent=="Americas"]-mean(gapminder_3_continents$lifeExp[gapminder_3_continents$continent=="Americas"]))^2,
  (gapminder_3_continents$lifeExp[gapminder_3_continents$continent=="Africa"]-mean(gapminder_3_continents$lifeExp[gapminder_3_continents$continent=="Africa"]))^2
)

(ss_between/2)/(ss_within_long/(length(gapminder_3_continents$lifeExp)-3))

```

## Python

```{python}
#| eval: false
gapminder_3_continents['continent'] = gapminder_3_continents['continent'].astype('category')
model3 = ols('lifeExp ~ continent', data = gapminder_3_continents).fit()
aov_table3 = sm.stats.anova_lm(model3, typ=2)
aov_table3

ss_between = (gapminder_3_continents['lifeExp'][gapminder_3_continents['continent']=="Europe"].mean() - gapminder_3_continents['lifeExp'].mean())**2 * sum(gapminder_3_continents['continent']=="Europe")+(gapminder_3_continents['lifeExp'][gapminder_3_continents['continent']=="Americas"].mean() - gapminder_3_continents['lifeExp'].mean())**2 * sum(gapminder_3_continents['continent']=="Americas")+(gapminder_3_continents['lifeExp'][gapminder_3_continents['continent']=="Africa"].mean() - gapminder_3_continents['lifeExp'].mean())**2 * sum(gapminder_3_continents['continent']=="Africa")

totalSS = sum((gapminder_3_continents['lifeExp'] - gapminder_3_continents['lifeExp'].mean())**2)

within1_all=(gapminder_3_continents['lifeExp'][gapminder_3_continents['continent']=="Europe"]-gapminder_3_continents['lifeExp'][gapminder_3_continents['continent']=="Europe"].mean())**2
within1= sum(within1_all)

within2_all=(gapminder_3_continents['lifeExp'][gapminder_3_continents['continent']=="Americas"]-gapminder_3_continents['lifeExp'][gapminder_3_continents['continent']=="Americas"].mean())**2
within2= sum(within2_all)

within3_all=(gapminder_3_continents['lifeExp'][gapminder_3_continents['continent']=="Africa"]-gapminder_3_continents['lifeExp'][gapminder_3_continents['continent']=="Africa"].mean())**2
within3= sum(within3_all)

ss_within_long = within1 + within2 + within3

(ss_between/2)/(ss_within_long/(len(gapminder_3_continents['lifeExp'])-3))

```
:::

```         
114.42116407168957
```

To visualise this

::: panel-tabset
## R

```{r}
lm_3_continents <- summary(lm(lifeExp ~ factor(continent), data = gapminder_3_continents))
lm_3_continents$coefficients
mean(gapminder_3_continents$lifeExp[gapminder_3_continents$continent=="Europe"])

gapminder_3_continents$continent_mean = lm_3_continents$coefficients[1,1] # intercept, which is mean for Africa as there are only "Americas" and "Europe" factors.
gapminder_3_continents$continent_mean[gapminder_3_continents$continent == "Americas"] = gapminder_3_continents$continent_mean[gapminder_3_continents$continent == "Americas"] + lm_3_continents$coefficients[2,1]

gapminder_3_continents$continent_mean[gapminder_3_continents$continent == "Europe"] = gapminder_3_continents$continent_mean[gapminder_3_continents$continent == "Europe"] + lm_3_continents$coefficients[3,1]



ggplot(gapminder_3_continents, aes(x = continent, y = lifeExp)) +
  geom_segment(
    position = "jitter",
    #arrow = arrow(length = unit(0.01, "npc"),ends = "first"),
    aes(
      xend = continent,
      yend = continent_mean,
      color = "resid"
    )
  ) + 
  geom_segment(aes(
    x = 0.55, 
    xend = 1.45, 
    y = lm_3_continents$coefficients[1,1],
    yend = lm_3_continents$coefficients[1,1]),
    color = "blue"
  ) + 
  geom_segment(aes(
    x = 1.55, 
    xend = 2.45, 
    y = lm_3_continents$coefficients[2,1] + lm_3_continents$coefficients[1,1],
    yend = lm_3_continents$coefficients[2,1] + lm_3_continents$coefficients[1,1]),
    color = "blue"
  ) + 
  geom_segment(aes(
    x = 2.55, 
    xend = 3.45, 
    y = lm_3_continents$coefficients[3,1] + lm_3_continents$coefficients[1,1],
    yend = lm_3_continents$coefficients[3,1] + lm_3_continents$coefficients[1,1]),
    color = "blue"
  ) +
  geom_segment(
    aes(
      x = 0.55,
      xend = 3.45,
      y = mean(gapminder_3_continents$lifeExp),
      yend = mean(gapminder_3_continents$lifeExp),
      color = "Overall Mean"
    )
  )

```

## Python

```{python}
#| eval: false

import seaborn as sns

spec = dict(x="continent", y="lifeExp", data=gapminder_3_continents)
fig, ax = plt.subplots(figsize =(7, 5))
sns.stripplot(**spec, size=4, palette="deep")
sns.pointplot(**spec, join=False, ci=0, capsize=.7, scale=0, palette="deep")
plt.axhline(y=gapminder_3_continents["lifeExp"].mean(), color='red', ls='-')
plt.show()
```
:::

*Fig. XXX.* Our model in the figure above considers the distance from each of the continent's mean to the overall mean as part of the explained variance. For each data point, the squared distance from the the mean line to the overall mean line is part of the sum of squares at the top of the formula.

### 2 x 2 ANOVA

Let's create data to allow us to compare between 2 years, and between Europe and Americas

::: panel-tabset
## R

```{r}
# create a new data frame that only focuses on data from 2007
gapminder_2_by_2 <- subset(
  gapminder,   # the data set
  year == 2002 & continent == "Africa" |
  year == 2007 & continent == "Africa" |
  year == 2002 & continent == "Europe" |
  year == 2007 & continent == "Europe"
)

summary(lm(lifeExp ~ factor(year) * factor(continent), gapminder_2_by_2))
summary(aov(lifeExp ~ factor(year) * factor(continent), gapminder_2_by_2))



```

## Python

```{python}
#| eval: false

# create a new data frame that only focuses on data from 2007
gapminder_2_by_2 = gapminder.loc[(gapminder['year'] == 2002) & (gapminder['continent'] == "Africa") | (gapminder['year'] == 2007) & (gapminder['continent'] == "Africa") | (gapminder['year'] == 2002) & (gapminder['continent'] == "Europe") | (gapminder['year'] == 2007) & (gapminder['continent'] == "Europe") ]

from statsmodels.formula.api import ols

fit = ols('lifeExp ~ C(year) + C(continent)', data=gapminder_2_by_2).fit() 

fit.summary()

lm_4_continents_aov_table = sm.stats.anova_lm(fit, typ=2)
lm_4_continents_aov_table

```
:::

manual calculation of f-value for 2 x 2

::: panel-tabset
## R

```{r}
library(tidyverse)

overallMeanLifeExp = mean(gapminder_2_by_2$lifeExp)
totalVar = sum((gapminder_2_by_2$lifeExp - mean(gapminder_2_by_2$lifeExp))^2)
gapminder_2_by_2 %>%
  group_by(continent, year) %>%
  summarise(
    mean_lifeExp = mean(lifeExp),
    countries    = length(lifeExp),
    betweenSS    = countries * ((overallMeanLifeExp - mean_lifeExp)^2)
  ) -> year_continent_means

year_continent_means

sum(year_continent_means$betweenSS)
totalVar

sum(year_continent_means$betweenSS)/totalVar
(sum(year_continent_means$betweenSS))/totalVar

df_total <- length(gapminder_2_by_2$country) - 1
df_res <- length(gapminder_2_by_2$country) - 
  1 - #data points
  3   # predictors

ss_res = totalVar - sum(year_continent_means$betweenSS)

1 - (ss_res/df_res)/(totalVar/df_total)

##
# break down of types of variance
##
continent_df <- gapminder_2_by_2 %>%
  group_by(continent) %>%
  summarise(
    mean_lifeExp = mean(lifeExp),
    countries    = length(lifeExp),
    betweenSS    = countries * ((overallMeanLifeExp - mean_lifeExp)^2)
  )

sum(continent_df$betweenSS)


year_df <- gapminder_2_by_2 %>%
  group_by(year) %>%
  summarise(
    mean_lifeExp = mean(lifeExp),
    countries    = length(lifeExp),
    betweenSS    = countries * ((overallMeanLifeExp - mean_lifeExp)^2)
  )

sum(year_df$betweenSS)

##
# interaction
##
sum(year_continent_means$betweenSS) - sum(continent_df$betweenSS) - sum(year_df$betweenSS)


gapminder
20319 +
68 +
3
```

## Python

```{python}
#| eval: false

from siuba import group_by, summarize, _

overallMeanLifeExp = gapminder_2_by_2['lifeExp'].mean()

totalVar = sum((gapminder_2_by_2['lifeExp'] - gapminder_2_by_2['lifeExp'].mean())**2)


year_continent_means=(gapminder_2_by_2
  >> group_by(_.continent, _.year)
  >> summarize(mean_lifeExp = _.lifeExp.mean(),
              countries = _.lifeExp.count())
              )
year_continent_means['betweenSS'] = year_continent_means['countries'] * ((overallMeanLifeExp - year_continent_means['mean_lifeExp'])**2)

print(tabulate(year_continent_means, headers=year_continent_means.head(), tablefmt="fancy_grid",showindex=False))

sum(year_continent_means['betweenSS'])

totalVar

sum(year_continent_means['betweenSS'])/totalVar

df_total = len(gapminder_2_by_2['country']) - 1
df_res = len(gapminder_2_by_2['country']) - 1 - 3
ss_res = totalVar - sum(year_continent_means['betweenSS'])
1 - (ss_res/df_res)/(totalVar/df_total)

continent_df=(gapminder_2_by_2
  >> group_by(_.continent)
  >> summarize(mean_lifeExp = _.lifeExp.mean(),
              countries = _.lifeExp.count())
              )
continent_df['betweenSS'] = continent_df['countries'] * ((overallMeanLifeExp - continent_df['mean_lifeExp'])**2)
sum(continent_df['betweenSS'])

year_df=(gapminder_2_by_2
  >> group_by(_.year)
  >> summarize(mean_lifeExp = _.lifeExp.mean(),
              countries = _.lifeExp.count())
              )
year_df['betweenSS'] = year_df['countries'] * ((overallMeanLifeExp - year_df['mean_lifeExp'])**2)
sum(year_df['betweenSS'])

sum(year_continent_means['betweenSS']) - sum(continent_df['betweenSS']) - sum(year_df['betweenSS'])

print(tabulate(gapminder[:10], headers=gapminder.head(), tablefmt="fancy_grid",showindex=False))

20319 +68 +3


```
:::

### 3 way ANOVA

::: panel-tabset
## R

```{r}

gapminder_2_by_2$pop_split = "high"
gapminder_2_by_2$pop_split[gapminder_2_by_2$pop < median(gapminder_2_by_2$pop)] = "low"

gapminder_2_by_2 %>%
  group_by(continent, year, pop_split) %>%
  summarise(
    mean_lifeExp = mean(lifeExp),
    countries    = length(lifeExp),
    betweenSS    = countries * ((overallMeanLifeExp - mean_lifeExp)^2)
  ) -> three_way_summary


sum(three_way_summary$betweenSS)

summary(lm(lifeExp ~ factor(year) * factor(continent), gapminder_2_by_2))
summary(aov(lifeExp ~ factor(year) * factor(continent), gapminder_2_by_2))

summary(aov(lifeExp ~ factor(year) * factor(continent) * factor(pop_split), gapminder_2_by_2))
summary(lm(lifeExp ~ factor(year) * factor(continent) * factor(pop_split), gapminder_2_by_2))


20319 +
68 +
3 + 
  13


20403.63
```

## Python

```{python}
#| eval: false
gapminder_2_by_2['pop_split']=0

gapminder_2_by_2['pop_split'].loc[gapminder_2_by_2['pop']<np.median(gapminder_2_by_2['pop'])]="low"
gapminder_2_by_2['pop_split'].loc[gapminder_2_by_2['pop']>=np.median(gapminder_2_by_2['pop'])]="high"

three_way_summary = (gapminder_2_by_2
  >> group_by(_.continent, _.year, _.pop_split)
  >> summarize(mean_lifeExp = _.lifeExp.mean(),
              countries = _.lifeExp.count())
              )
three_way_summary['betweenSS'] = three_way_summary['countries'] * ((overallMeanLifeExp - three_way_summary['mean_lifeExp'])**2)
sum(three_way_summary['betweenSS'])



fit2 = ols('lifeExp ~ C(year) + C(continent) + C(pop_split)', data=gapminder_2_by_2).fit() 

fit2.summary()

```
:::

# Is there a difference between a within-subject 4 level ANOVA vs. a 2 x 2 for the interaction?

# plotting for the slides

::: panel-tabset
## R

```{r}

lifeExp_gdp <- lm(lifeExp ~ gdpPercap, gapminder_americas_europe)

summary(lifeExp_gdp)

gapminder_americas_europe$gdp_fit = lifeExp_gdp$coefficients[1] + # intercept
  lifeExp_gdp$coefficients[2]                       * # gradient
  gapminder_americas_europe$gdpPercap


ggplot(gapminder_americas_europe, aes(x = gdpPercap, y = lifeExp)) +
  geom_smooth(method = "glm", se = F) +
  geom_segment(
    position = "jitter",
    #arrow = arrow(length = unit(0.01, "npc"),ends = "first"),
    aes(
      xend = gdpPercap,
      yend = gdp_fit,
      color = "residual"
    )
  ) + 
  geom_segment(
    aes(
      x = 0.55,
      xend = 50000,
      y = mean(gapminder_americas_europe$lifeExp),
      yend = mean(gapminder_americas_europe$lifeExp),
      color = "Overall Mean"
    ),
    size = 1,
    color = "dark green"
  )
```

## Python

```{python}
#| eval: false

```
:::


