gini_ses = sqrt((6*gini_n*(gini_n-1))/((gini_n-2)*(gini_n+1)*(gini_n+3)))
spssSkewKurtosis=function(x) {
w=length(x)
m1=mean(x)
m2=sum((x-m1)^2)
m3=sum((x-m1)^3)
m4=sum((x-m1)^4)
s1=sd(x)
skew=w*m3/(w-1)/(w-2)/s1^3
sdskew=sqrt( 6*w*(w-1) / ((w-2)*(w+1)*(w+3)) )
kurtosis=(w*(w+1)*m4 - 3*m2^2*(w-1)) / ((w-1)*(w-2)*(w-3)*s1^4)
sdkurtosis=sqrt( 4*(w^2-1) * sdskew^2 / ((w-3)*(w+5)) )
mat=matrix(c(skew,kurtosis, sdskew,sdkurtosis), 2,
dimnames=list(c("skew","kurtosis"), c("estimate","se")))
return(mat)
}
spssSkewKurtosis(gini_clean)
spssSkewKurtosis(gini_clean) <- beep
spssSkewKurtosis(gini_clean) -> beep
beep
beep$estimate
beep[[estimate]]
beep[["estimate"]]
beep[0]
beep[1]
beep[2]
beep[3]
beep[4]
positive_skew_n = length(positive_skew)
pos_skew_ses = sqrt((6*positive_skew_n*(positive_skew_n-1))/((positive_skew_n-2)*(positive_skew_n+1)*(positive_skew_n+3)))
pos_skew_ses
positive_n = length(positive_skew)
positive_skewness = sum(((positive_skew - mean(positive_skew))/sd(positive_skew))^3) * (
positive_n / ((positive_n-1) * (positive_n - 2))
)
positive_skew_n = length(positive_skew)
positive_skewness = sum(((positive_skew - mean(positive_skew))/sd(positive_skew))^3) * (
positive_skew_n / ((positive_skew_n-1) * (positive_skew_n - 2))
)
# applying this to the data above
positive_skew_n = length(positive_skew)
positive_skewness = sum(((positive_skew - mean(positive_skew))/sd(positive_skew))^3) * (
positive_skew_n / ((positive_skew_n-1) * (positive_skew_n - 2))
)
# to show the output:
positive_skewness
spssSkewKurtosis(positive_skewness)
spssSkewKurtosis(positive_skew)
heights_vector
population_heights_x <- seq(
150,
200,
by = 1
)
population_heights_y <- dnorm(
x,
mean = 150,
sd   = 10
)
population_heights_x <- seq(
140,    # min
210,    # max
by = 1
)
population_heights_y <- dnorm(
x,
mean = 150,
sd   = 10
)
plot(
population_heights_x,
population_heights_y
)
population_heights_x <- seq(
140,    # min
210,    # max
by = 1
)
population_heights_y <- dnorm(
population_heights_x,
mean = 150,
sd   = 10
)
plot(
population_heights_x,
population_heights_y
)
# Plot a normal distribution of heights
population_heights_x <- seq(
140,    # min
210,    # max
by = 1
)
population_heights_y <- dnorm(
population_heights_x,
mean = 150,
sd   = 10
)
plot(
population_heights_x,
population_heights_y
)
# Add line to show mean
abline(
v=150,  # where the line for the mean will be
lwd=5
)
# Add line to show my height
abline(
v=170, # where the line for the median will be
lwd=3,
lty=3
)
JohnsonJohnson
john_height <- 170
mean_height <- 150
height_sd   <- 10
john_z_score <- (john_height - mean_height)/height_sd
john_z_score
# Plot a normal distribution of heights
z_score_x <- seq(
-3,    # min
3,    # max
by = .1
)
z_score_y <- dnorm(
z_score_x,
mean = 0,
sd   = 1
)
plot(
z_score_x,
z_score_y
)
# Add line to show mean
abline(
v=0,  # where the line for the mean will be
lwd=.1
)
# Add line to show my height
abline(
v=2, # where the line for the median will be
lwd=3,
lty=3
)
# Plot a normal distribution of heights
z_score_x <- seq(
-3,    # min
3,    # max
by = .1
)
z_score_y <- dnorm(
z_score_x,
mean = 0,
sd   = 1
)
plot(
z_score_x,
z_score_y
)
# Add line to show mean
abline(
v=0,  # where the line for the mean will be
lwd=3
)
# Add line to show my height
abline(
v=2, # where the line for the median will be
lwd=3,
lty=3
)
# Plot a normal distribution of heights
population_heights_x <- seq(
140,    # min
200,    # max
by = 1
)
population_heights_y <- dnorm(
population_heights_x,
mean = 150,
sd   = 10
)
plot(
population_heights_x,
population_heights_y
)
# Add line to show mean
abline(
v=150,  # where the line for the mean will be
lwd=5
)
# Add line to show my height
abline(
v=170, # where the line for the median will be
lwd=3,
lty=3
)
# Plot a normal distribution of heights
z_score_x <- seq(
-1,    # min
5,    # max
by = .1
)
z_score_y <- dnorm(
z_score_x,
mean = 0,
sd   = 1
)
plot(
z_score_x,
z_score_y
)
# Add line to show mean
abline(
v=0,  # where the line for the mean will be
lwd=3
)
# Add line to show my height
abline(
v=2, # where the line for the median will be
lwd=3,
lty=3
)
# compare the values below with the plot of the z_score plot
pnorm(
q = john_height, # put in the z-value here
mean = 0,
sd = 1,
lower.tail = TRUE
)
# compare the values below with the plot of the z_score plot
pnorm(
q = john_height, # put in the z-value here
mean = 0,
sd = 1,
lower.tail = F
)
john_height
# Plot a normal distribution of heights
z_score_x <- seq(
-1,    # min
5,    # max
by = .1
)
z_score_y <- dnorm(
z_score_x,
mean = 0,
sd   = 1
)
plot(
z_score_x,
z_score_y
)
# Add line to show mean
abline(
v=0,  # where the line for the mean will be
lwd=3
)
# Add line to show John's height
abline(
v=john_z_score,
lwd=3,
lty=3
)
# compare the values below with the plot of the z_score plot
pnorm(
q = john_z_score, # put in the z-value here
mean = 0,
sd = 1,
lower.tail = F
)
# compare the values below with the plot of the z_score plot
pnorm(
q = john_z_score, # put in the z-value here
mean = 0,
sd = 1,
lower.tail = T
)
# compare the values below with the plot of the z_score plot
pnorm(
q = john_z_score, # put in the z-value here
mean = 0,
sd = 1,
lower.tail = F
)
# compare the values below with the plot of the z_score plot
pnorm(
q = 1.96, # put in the z-value here
mean = 0,
sd = 1,
lower.tail = F
)
# compare the values below with the plot of the z_score plot
pnorm(
q = 1.96, # put in the z-value here
mean = 0,
sd = 1,
lower.tail = F
)
# compare the values below with the plot of the z_score plot
pnorm(
q = 1.64, # put in the z-value here
mean = 0,
sd = 1,
lower.tail = F
)
# compare the values below with the plot of the z_score plot
pnorm(
q = 1.65, # put in the z-value here
mean = 0,
sd = 1,
lower.tail = F
)
# Plot a normal distribution of heights
z_score_x <- seq(
-3,    # min
3,    # max
by = .1
)
z_score_y <- dnorm(
z_score_x,
mean = 0,
sd   = 1
)
plot(
z_score_x,
z_score_y
)
# Add line to show mean
abline(
v=0,  # where the line for the mean will be
lwd=3
)
# Add line to show lower threshold
abline(
v=john_z_score,
lwd=-1.96,
lty=3
)
abline(
v=john_z_score,
lwd= 1.96,
lty=3
)
# Plot a normal distribution of heights
z_score_x <- seq(
-3,    # min
3,    # max
by = .1
)
z_score_y <- dnorm(
z_score_x,
mean = 0,
sd   = 1
)
plot(
z_score_x,
z_score_y
)
# Add line to show mean
abline(
v=0,  # where the line for the mean will be
lwd=3
)
# Add line to show lower threshold
abline(
v= -1.96,
lwd=3,
lty=3
)
# Add line to show higher threshold
abline(
v= 1.96,
lwd=3,
lty=3
)
heights_vector
gapminder_2007$lifeExp                             # to review the numbers
mean_life_expectancy = sum_life_expectancy/n_life_expectancy
gapminder_2007                                               # a reminder of the data frame
sum_life_expectancy  = sum(gapminder_2007$lifeExp)           # total of all years
n_life_expectancy    = length(gapminder_2007$lifeExp)        # count the people
mean_life_expectancy = sum_life_expectancy/n_life_expectancy
gapminder_2007                                               # a reminder of the data frame
sum_life_expectancy  = sum(gapminder_2007$lifeExp)           # total of all years
n_life_expectancy    = length(gapminder_2007$lifeExp)        # count the people
mean_life_expectancy = sum_life_expectancy/n_life_expectancy
mean_life_expectancy
mean(gapminder_2007$lifeExp)
source_rmd("correlation.Rmd")
source_rmd = function(file, ...) {
tmp_file = tempfile(fileext=".R")
on.exit(unlink(tmp_file), add = TRUE)
knitr::purl(file, output=tmp_file)
source(file = tmp_file, ...)
}
source_rmd("correlation.Rmd")
rmarkdown::render("correlation.Rmd")
r2d3::r2d3("Documents/GitHub/reading-psych/jast/d3.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
mpg
mpg$manufacturer
mean(gapminder_2007$lifeExp)
median(gapminder_2007$lifeExp)
mtcars::mpg
mtcars
tidyverse::mtcars
tidyverse::mpg
datasets::mtcars
mpg
datasets::mtcars
mpg
tidyverse::tidyverse_packages()
ggplot2::mpg
ggplot2::mpg
ggplot2::mpg$manufacturer
# To make a nice looking table
rmarkdown::paged_table(head(ggplot2::mpg))
my_age = 365 * 35.6
# install (if required) and load the gapminder data
if(!require(gapminder)){install.packages("gapminder")}
library(gapminder)
# create a new data frame that only focuses on data from 2007
gapminder_2007 <- subset(
gapminder,   # the data set
year == 2007
)
min(gapminder_2007$lifeExp)
max(gapminder_2007$lifeExp)
sq = sqrt
sq = 5
sqrt
.beep <- 0
beep
.beep
.bop
.bop <- 90
bop
mean(gapminder_2007$lifeExp)
median(gapminder_2007$lifeExp)
mean(gapminder_2007$lifeExp)
median(gapminder_2007$lifeExp)
mode(gapminder_2007$lifeExp)
help("mode")
names(sort(-table(gapminder_2007$lifeExp)))[1]
gapminder_2007$lifeExp
unique(gapminder_2007$lifeExp)
length(unique(gapminder_2007$lifeExp))
length(gapminder_2007$lifeExp)
length(unique(gapminder_2007$lifeExp))
length(gapminder_2007$lifeExp)
length(unique(gapminder_2007$lifeExp))
# Solution for calculting mode found at https://stackoverflow.com/a/2547551 as there doesn't seem to be a native function:
library(modeest)
mlv(mySamples, method = "mfv")
mlv(gapminder_2007$lifeExp, method = "mfv")
mode_example_vector <- c(1,2,2,3)
mlv(mode_example_vector, method = "mfv")
mode_example_vector <- c(1,2,2,3,3,4)
mlv(mode_example_vector, method = "mfv")
var(c(1,2,3))
life_expectancy_variance_table <- data.frame(
life_expectance = gapminder_2007$lifeExp,
diff_from_mean  = gapminder_2007$lifeExp - mean(gapminder_2007$lifeExp)
)
life_expectancy_variance_table <- data.frame(
life_expectance = gapminder_2007$lifeExp,
diff_from_mean  = gapminder_2007$lifeExp - mean(gapminder_2007$lifeExp)
)
life_expectancy_variance_table <- data.frame(
life_expectance = gapminder_2007$lifeExp,
diff_from_mean  = gapminder_2007$lifeExp - mean(gapminder_2007$lifeExp)
)
rmarkdown::paged_table(life_expectancy_variance_table)
mean(abs(life_expectancy_variance_table$diff_from_mean))
sqrt(sum(life_expectancy_variance_table$diff_from_mean^2)/length(life_expectancy_variance_table$diff_from_mean))
mean(abs(life_expectancy_variance_table$diff_from_mean))
sqrt(sum(life_expectancy_variance_table$diff_from_mean^2)/length(life_expectancy_variance_table$diff_from_mean))
sd(life_expectancy_variance_table$life_expectance)
mean(abs(life_expectancy_variance_table$diff_from_mean))
sqrt(sum(life_expectancy_variance_table$diff_from_mean^2)/length(life_expectancy_variance_table$diff_from_mean))
sd(life_expectancy_variance_table$life_expectance)
mean(abs(life_expectancy_variance_table$diff_from_mean))
sqrt(sum(life_expectancy_variance_table$diff_from_mean^2)/(length(life_expectancy_variance_table$diff_from_mean))-1)
sd(life_expectancy_variance_table$life_expectance)
life_expectancy_variance_table <- data.frame(
life_expectancy = gapminder_2007$lifeExp,
diff_from_mean  = gapminder_2007$lifeExp - mean(gapminder_2007$lifeExp)
)
rmarkdown::paged_table(life_expectancy_variance_table)
mean(life_expectancy_variance_table$diff_from_mean)
life_expectancy_variance_table <- data.frame(
life_expectancy = gapminder_2007$lifeExp,
diff_from_mean  = gapminder_2007$lifeExp - mean(gapminder_2007$lifeExp)
)
rmarkdown::paged_table(life_expectancy_variance_table)
mean(life_expectancy_variance_table$diff_from_mean)
mean(life_expectancy_variance_table$diff_from_mean) == 0
mean(life_expectancy_variance_table$diff_from_mean)
mean(life_expectancy_variance_table$diff_from_mean) * 1000000000000000
5.153937e-15 == .0000000000000005.153937
5.153937e-15 == .0000000000000005153937
5.153937e-15 == .000000000000005153937
``` {.r}
``` {.r}
``` {.r}
``` {.r}
1 + 2
reticulate::repl_python()
install.packages("reticulate")
reticulate::repl_python()
1 + 4
yes
