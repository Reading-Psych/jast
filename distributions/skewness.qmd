---
title: "Skewness"
format: html
editor: visual
---

**Parametric** analyses are based on the assumption that the data you are analysing is normally distributed (see below):

```{r}
library(ggplot2)
# https://stackoverflow.com/a/12429538
norm_x<-seq(-4,4,0.01)

norm_data_frame<-data.frame(x=norm_x,y=dnorm(norm_x,0,1))



shade_50 <- rbind(
  c(0,0), 
  subset(norm_data_frame, x > 0), 
  c(norm_data_frame[nrow(norm_data_frame), "X"], 0))

shade_84.1 <- rbind(
  c(1,0), 
  subset(norm_data_frame, x > 1), 
  c(norm_data_frame[nrow(norm_data_frame), "X"], 0))


shade_97.7 <- rbind(
  c(2,0), 
  subset(norm_data_frame, x > 2), 
  c(norm_data_frame[nrow(norm_data_frame), "X"], 0))


p<-qplot(
  x=norm_data_frame$x,
  y=norm_data_frame$y,
  geom="line"
)

 p +
   geom_polygon(
     data = shade_50,
     aes(
       x,
       y,
       fill="50"
      )
    ) +
   geom_polygon(
     data = shade_84.1,
     aes(
       x,
       y,
       fill="84.1"
      )
    ) +
   geom_polygon(
     data = shade_97.7, 
     aes(
       x, 
       y,
       fill="97.7"
      )
    ) +
   xlim(c(-4,4)) +
   
   annotate("text", x=0.5, y=0.01, label= "34.1%") + 
   annotate("text", x=1.5, y=0.01, label= "13.6%") + 
   annotate("text", x=2.25, y=0.01, label= "2.3%") +
   xlab("Z-score") +
   ylab("Frequency") +
   theme(legend.position="none")
```

```{r}
library(ggplot2)
# https://stackoverflow.com/a/12429538
norm_x<-seq(-4,4,0.01)

norm_data_frame<-data.frame(x=norm_x,y=dnorm(norm_x,0,1))


shade_2.3 <- rbind(
  c(-3,0), 
  subset(norm_data_frame, x > -3), 
  c(norm_data_frame[nrow(norm_data_frame), "X"], 0))

shade_13.6 <- rbind(
  c(-2,0), 
  subset(norm_data_frame, x > -2), 
  c(norm_data_frame[nrow(norm_data_frame), "X"], 0))

shade_34.1 <- rbind(
  c(-1,0), 
  subset(norm_data_frame, x > -1), 
  c(norm_data_frame[nrow(norm_data_frame), "X"], 0))

shade_50 <- rbind(
  c(0,0), 
  subset(norm_data_frame, x > 0), 
  c(norm_data_frame[nrow(norm_data_frame), "X"], 0))

shade_84.1 <- rbind(
  c(1,0), 
  subset(norm_data_frame, x > 1), 
  c(norm_data_frame[nrow(norm_data_frame), "X"], 0))


shade_97.7 <- rbind(
  c(2,0), 
  subset(norm_data_frame, x > 2), 
  c(norm_data_frame[nrow(norm_data_frame), "X"], 0))


p<-qplot(
  x=norm_data_frame$x,
  y=norm_data_frame$y,
  geom="line"
)

 p +
   geom_polygon(
     data = shade_2.3,
     aes(
       x,
       y,
       fill="2.3"
      )
    ) +
   geom_polygon(
     data = shade_13.6,
     aes(
       x,
       y,
       fill="13.6"
      )
    ) +
   geom_polygon(
     data = shade_34.1,
     aes(
       x,
       y,
       fill="34.1"
      )
    ) +
   geom_polygon(
     data = shade_50,
     aes(
       x,
       y,
       fill="50"
      )
    ) +
   geom_polygon(
     data = shade_84.1,
     aes(
       x,
       y,
       fill="84.1"
      )
    ) +
   geom_polygon(
     data = shade_97.7, 
     aes(
       x, 
       y,
       fill="97.7"
      )
    ) +
   xlim(c(-4,4)) +
   
   annotate("text", x=-2.3, y=0.01, label= "13.6%") + 
   annotate("text", x=-1.5, y=0.01, label= "34.1%") + 
   annotate("text", x=-0.6, y=0.01, label= "50%") + 
   annotate("text", x=0.5, y=0.01, label= "84.1%") + 
   annotate("text", x=1.5, y=0.01, label= "97.7%") + 
   annotate("text", x=2.25, y=0.01, label= "100%") +
   xlab("Z-score") +
   ylab("Frequency") +
   theme(legend.position="none")
```

If your data fits a normal distribution, then you can draw conclusions based on certain facts about this distribution, e.g. the fact that 97.7% of your population *should* have a score that is more negative than +2 standard deviations above the mean (*because Z-scores represent standard deviations from the mean*). As a result, if your data is positively skewed:

```{r}
# generate a positively skewed distribution between 0 and 1
positive_skew = rbeta(10000,2,5)
positive_skew = positive_skew - mean(positive_skew)
hist(positive_skew, main="Positively skewed data")
abline(
  v=mean(positive_skew),  # where the line for the mean will be 
  lwd=5
)
abline(
  v=median(positive_skew), # where the line for the median will be
  lwd=3,
  lty=3
)
```

or negatively skewed

```{r}
negative_skew = rbeta(10000,5,2)
hist(negative_skew, main = "Negatively skewed data")
abline(
  v=mean(negative_skew),  # where the line for the mean will be 
  lwd=5
)
abline(
  v=median(negative_skew), 
  lwd=3,
  lty=3
)
```

It is no longer the case that 1 standard deviation above or below the mean will capture the same number of people.

So whilst this histogram visualises the distribution of the data, it's helpful to be able to **statistically quantify** (i.e. give numbers that represent) this distribution. Remember that for many statistical tests (parametric) it's helpful to have data that is **normally distributed**. Normally distributed data (also known as **Gaussian distributions** and associated with **parametric statistics**) generally looks like a bell curve:

```{r echo=F}
# generating random data to fit a normal distribution.
norm_data <-rnorm(
  100000,               # the number of samples
  mean=0,               # the mean (which in this case should be almost identical to the median)
  sd=1                  # the standard deviation
)
hist(
  norm_data,
  breaks = 100,           # the number of bins (the more bins there are, the thinner each bin is)
  xlim   = c(-3,3),       # the range of the x-axis
  freq   = FALSE,         # changes the y-axis from reporting the absolute frequency to reporting the relative density
  xlab   = "SDs", 
  main   = "Normal distribution (pseudo-randomly generated)"
)
```

So we can see when comparing the shape of life expectancies and the shape of a normal distribution that the two aren't the same. There are 3 things we'll look for to *quantify* how much of a problem we have with our current distribution:

-   skewness
-   kurtosis

## Skewness

Data can be negatively skewed, where the mean is less than the median:

```{r}
# Skewed to the right
negative_skew = rbeta(10000,5,2)
hist(negative_skew, main = "Negatively skewed data")
abline(
  v=mean(negative_skew),  # where the line for the mean will be 
  lwd=5
)
abline(
  v=median(negative_skew), 
  lwd=3,
  lty=3
)
```

*The thick lines represents the mean; the dashed lines represents the median. The bigger the distance between these, the less normally distributed your data is. (see* **central tendancy** *below)*

Or positively skewed, where the median is less than the mean:

```{r}

# Skewed to the left
positive_skew = rbeta(10000,2,5)
hist(positive_skew, main="Positively skewed data")
abline(
  v=mean(positive_skew),  # where the line for the mean will be 
  lwd=5
)
abline(
  v=median(positive_skew), # where the line for the median will be
  lwd=3,
  lty=3
)
```

*The thick lines represents the mean; the dashed lines represents the median. The bigger the distance between these, the less normally distributed your data is. (see central tendancy below)*

So now that we know what skewed distributions look like, we now need to **quantify** how much of a problem with skewness there is. If we add together the amount of skewness for each data point together and then divide by a general summary of the total standard deviation, then you get an estimate of skewness. The next section is a breakdown of the formula for those interested in it (but this is *not crucial*), but **the key point point is that outliers skew the data, and so outliers that are larger than the mean positively skew the data, and outliers below the mean negatively skew it. If there are an equal number of outliers on either side of the mean then the data will not be skewed.**

::: {.optional_content style="border-radius:10px; border: 5px solid green;"}
#### Optional

If we want to manually calculate skewness:

$$
\tilde{\mu_{3}} = \sum((\frac{x_i- \bar{x}{}} {\sigma} )^3) * \frac{N}{(N-1) * (N-2)}
$$ To do this in R you *could* calculate it manually

```{r}
# applying this to the positive skew data above
positive_skew_n = length(positive_skew)
positive_skewness = sum(((positive_skew - mean(positive_skew))/sd(positive_skew))^3) * (
  positive_skew_n / ((positive_skew_n-1) * (positive_skew_n - 2))
)
# to show the output:
positive_skewness
```

... or just
:::

Use code from https://stackoverflow.com/a/54369572 to give you values for skewness (this has been chosen as this gives skewness and its standard error as calculated by major software like SPSS and JASP):

```{r}

# Skewness and kurtosis and their standard errors as implement by SPSS
#
# Reference: pp 451-452 of
# http://support.spss.com/ProductsExt/SPSS/Documentation/Manuals/16.0/SPSS 16.0 Algorithms.pdf
# 
# See also: Suggestion for Using Powerful and Informative Tests of Normality,
# Ralph B. D'Agostino, Albert Belanger, Ralph B. D'Agostino, Jr.,
# The American Statistician, Vol. 44, No. 4 (Nov., 1990), pp. 316-321

spssSkewKurtosis=function(x) {
  w=length(x)
  m1=mean(x)
  m2=sum((x-m1)^2)
  m3=sum((x-m1)^3)
  m4=sum((x-m1)^4)
  s1=sd(x)
  skew=w*m3/(w-1)/(w-2)/s1^3
  sdskew=sqrt( 6*w*(w-1) / ((w-2)*(w+1)*(w+3)) )
  kurtosis=(w*(w+1)*m4 - 3*m2^2*(w-1)) / ((w-1)*(w-2)*(w-3)*s1^4)
  sdkurtosis=sqrt( 4*(w^2-1) * sdskew^2 / ((w-3)*(w+5)) )
  
  ## z-scores added by reading-psych
  zskew = skew/sdskew
  zkurtosis = kurtosis/sdkurtosis

  mat=matrix(c(skew,kurtosis, sdskew,sdkurtosis, zskew, zkurtosis), 2,
        dimnames=list(c("skew","kurtosis"), c("estimate","se","zScore")))
  return(mat)
}
spssSkewKurtosis(positive_skew)

```

The above function generated three columns: $estimate$ of skewness (and kurtosis, but we'll deal with <a href="kurtosis.html" target="_blank">kurtosis</a> separately, $standard$ $error$ (SE) and the $skewness_z$ score. **Z-scores** can capture how unlikely the $skewness$ estimate is considering what you would normally expect. In this case, when you divide skewness by standard error, you get a z-score, and if the **absolute value** (i.e. ignoring whether it is positive or negative) of the z-score is greater than 1.96 then it is significantly skewed. If you want to understand why 1.96 is the main number, check out the subsection on <a href="normal.html" target="_blank">normal distributions</a>.

One way to deal with skewed data is to <a href="transform.html" target="_blank">transform</a> the data.
