{
  "hash": "21c2f2f77a138954458b554c7778c60e",
  "result": {
    "markdown": "---\ntitle: \"R Fundamentals\"\nformat: html\neditor: visual\n---\n\n\nR allows you to complete calculations, so lets start with that. Type into your markdown or script\n\nOften, you can use R as a calculator, for example, if you want to know what two people's heights are together you can add them:\n\n::: {.cell}\n\n```{.r .cell-code}\n120 + 130\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 250\n```\n:::\n:::\n\n\nIt's helpful to store these calculations into **objects** using *<-* as shown below:\n\n::: {.cell}\n\n```{.r .cell-code}\n# this # is starting a comment, code that will be ignored but allows you to annotate your work\nant_height <- 120 # this is exactly the same as writing ant_height = 5 + 2, but <- is encouraged in R to avoid confusion with other uses of = (e.g. == operator when you are comparing if two values are identical)\nbob_height <- 130\nant_height # to show what the value 120 is now stored in the object \"ant_height\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120\n```\n:::\n\n```{.r .cell-code}\nbob_height # to show what the value 130 is now stored in the object \"bob_height\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 130\n```\n:::\n:::\n\n\n\nThis means that you can compare objects to each other later, e.g. how much taller is Bob than Ant:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbob_height - ant_height\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\nSome advice/rules for **Objects** (sometimes known as variables in other coding languages):\n\n- You cannot have a space in an object name. \"my object\" would be an invalid object name.\n- Object names are ***case-sensitive***, so if your object is called \"MyObject\" you cannot refer to it as \"myobject\".\n- \".\" and \"_\" are acceptable characters in variable names.\n- You can overwrite objects in the same way that you define an object, but it arguably will make your code more **brittle**, so be careful doing so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nant_age <- 35 # at timepoint 1\nant_age # to confirm what the age was at this point\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 35\n```\n:::\n\n```{.r .cell-code}\n# wait a year\nant_age <- 36 # at timepoint 1\nant_age # to confirm that the age has been updated\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 36\n```\n:::\n:::\n\n\n- You can't start an object name with a number\n- be careful to not give an object the same name as a function! This will overwrite the function. To check if the name already exists, you can start typing it and press tab. So typing \"t.te\" and pressing the tab will give you \"t.test\"\n\n\n### Functions\n\nIn a variety of coding languages like R, **functions** are lines of code you can apply each time you call the function, and apply it to **input** to get an **output**. If you wanted to make a function that multiplied numbers by 2, it would look something like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntimes_two <- function(input){  # Define your function by stating it's name, and then using <- to describe it\n  output = input * 2           # creates an output object that is the input object (see line above) x 2\n  return (output)              # gives the output back to the user when they run the function\n}\ntimes_two(4)                   # should give you 8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\nThe **great news** is that you don't need to write functions 99% of the time in R, there are a wide variety of functions that are available. Some of which will be used in the next section.\n\n### Types of Objects\n\n#### Vectors\n\n**Vectors** store a series of values. Often these will be a series of numbers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheights_vector = c(120,130,135)\nheights_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120 130 135\n```\n:::\n:::\n\n\nThe \"c\" above is short for \"combine\" as you're combining values together to make this vector. \n**Strings** are values that have *characters* (also known as letters) in them. Lets see if we can make a vector of **strings**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames_vector = c(\"ant\", \"bob\", \"charles\")\nnames_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ant\"     \"bob\"     \"charles\"\n```\n:::\n:::\n\n\nLooks like we can. But what happens if you mix strings and numbers in a **vector**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyear_group = c(1, \"2a\", \"2b\")\nyear_group\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\"  \"2a\" \"2b\"\n```\n:::\n:::\n\n\nR seems to be happy to put them into a single vector. But there are different types of values and vectors, so lets ask R what each type of (using the \"typeof\" **function**) vectors we have above:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(heights_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(names_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(year_group)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\nThe numeric vector (\"heights\") is a \"double\" vector. **Double** refers to the fact that the numbers *can include decimals*, as opposed to **integer** numbers *which have to be whole numbers*. Interestingly, R has assumed the list of numbers should be **double** rather than **integer**, which seems like the more robust thing to do, as integer numbers can always be double, but double numbers can't always be integers. **Strings** are identified as \"**character**\" objects, because they are made of *characters*.\n\n#### Data frames\n\n**Data frames** look like tables, in which you have a series of columns with **headers** that describe each column. \n\nSome data frames are already loaded into RStudio when you run it, such as the \"mpg\" dataframe. To look at it, just type in it's name (and press CTRL-ENTER on the line, or CTRL-SHIFT-ENTER within the chunk. Note that the below won't work properly if you write it in the console, you should be running this within an rMarkdown or rNotebook):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmarkdown::paged_table(head(ggplot2::mpg))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"manufacturer\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"model\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"displ\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"year\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"cyl\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"trans\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"drv\"],\"name\":[7],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"cty\"],\"name\":[8],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"hwy\"],\"name\":[9],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"fl\"],\"name\":[10],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"class\"],\"name\":[11],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"audi\",\"2\":\"a4\",\"3\":\"1.8\",\"4\":\"1999\",\"5\":\"4\",\"6\":\"auto(l5)\",\"7\":\"f\",\"8\":\"18\",\"9\":\"29\",\"10\":\"p\",\"11\":\"compact\"},{\"1\":\"audi\",\"2\":\"a4\",\"3\":\"1.8\",\"4\":\"1999\",\"5\":\"4\",\"6\":\"manual(m5)\",\"7\":\"f\",\"8\":\"21\",\"9\":\"29\",\"10\":\"p\",\"11\":\"compact\"},{\"1\":\"audi\",\"2\":\"a4\",\"3\":\"2.0\",\"4\":\"2008\",\"5\":\"4\",\"6\":\"manual(m6)\",\"7\":\"f\",\"8\":\"20\",\"9\":\"31\",\"10\":\"p\",\"11\":\"compact\"},{\"1\":\"audi\",\"2\":\"a4\",\"3\":\"2.0\",\"4\":\"2008\",\"5\":\"4\",\"6\":\"auto(av)\",\"7\":\"f\",\"8\":\"21\",\"9\":\"30\",\"10\":\"p\",\"11\":\"compact\"},{\"1\":\"audi\",\"2\":\"a4\",\"3\":\"2.8\",\"4\":\"1999\",\"5\":\"6\",\"6\":\"auto(l5)\",\"7\":\"f\",\"8\":\"16\",\"9\":\"26\",\"10\":\"p\",\"11\":\"compact\"},{\"1\":\"audi\",\"2\":\"a4\",\"3\":\"2.8\",\"4\":\"1999\",\"5\":\"6\",\"6\":\"manual(m5)\",\"7\":\"f\",\"8\":\"18\",\"9\":\"26\",\"10\":\"p\",\"11\":\"compact\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n*Note that you may see 2 tables above, but they should be identical if so*\n\nThe **mpg** dataframe has information about a variety of cars, their manufacturers, models, as described https://ggplot2.tidyverse.org/reference/mpg.html. You will need to refer to data frames and their columns, the convention for this being to write data frame$column. Lets do this to see what's in the \"manufacturer\" column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::mpg$manufacturer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"audi\"       \"audi\"       \"audi\"       \"audi\"       \"audi\"      \n  [6] \"audi\"       \"audi\"       \"audi\"       \"audi\"       \"audi\"      \n [11] \"audi\"       \"audi\"       \"audi\"       \"audi\"       \"audi\"      \n [16] \"audi\"       \"audi\"       \"audi\"       \"chevrolet\"  \"chevrolet\" \n [21] \"chevrolet\"  \"chevrolet\"  \"chevrolet\"  \"chevrolet\"  \"chevrolet\" \n [26] \"chevrolet\"  \"chevrolet\"  \"chevrolet\"  \"chevrolet\"  \"chevrolet\" \n [31] \"chevrolet\"  \"chevrolet\"  \"chevrolet\"  \"chevrolet\"  \"chevrolet\" \n [36] \"chevrolet\"  \"chevrolet\"  \"dodge\"      \"dodge\"      \"dodge\"     \n [41] \"dodge\"      \"dodge\"      \"dodge\"      \"dodge\"      \"dodge\"     \n [46] \"dodge\"      \"dodge\"      \"dodge\"      \"dodge\"      \"dodge\"     \n [51] \"dodge\"      \"dodge\"      \"dodge\"      \"dodge\"      \"dodge\"     \n [56] \"dodge\"      \"dodge\"      \"dodge\"      \"dodge\"      \"dodge\"     \n [61] \"dodge\"      \"dodge\"      \"dodge\"      \"dodge\"      \"dodge\"     \n [66] \"dodge\"      \"dodge\"      \"dodge\"      \"dodge\"      \"dodge\"     \n [71] \"dodge\"      \"dodge\"      \"dodge\"      \"dodge\"      \"ford\"      \n [76] \"ford\"       \"ford\"       \"ford\"       \"ford\"       \"ford\"      \n [81] \"ford\"       \"ford\"       \"ford\"       \"ford\"       \"ford\"      \n [86] \"ford\"       \"ford\"       \"ford\"       \"ford\"       \"ford\"      \n [91] \"ford\"       \"ford\"       \"ford\"       \"ford\"       \"ford\"      \n [96] \"ford\"       \"ford\"       \"ford\"       \"ford\"       \"honda\"     \n[101] \"honda\"      \"honda\"      \"honda\"      \"honda\"      \"honda\"     \n[106] \"honda\"      \"honda\"      \"honda\"      \"hyundai\"    \"hyundai\"   \n[111] \"hyundai\"    \"hyundai\"    \"hyundai\"    \"hyundai\"    \"hyundai\"   \n[116] \"hyundai\"    \"hyundai\"    \"hyundai\"    \"hyundai\"    \"hyundai\"   \n[121] \"hyundai\"    \"hyundai\"    \"jeep\"       \"jeep\"       \"jeep\"      \n[126] \"jeep\"       \"jeep\"       \"jeep\"       \"jeep\"       \"jeep\"      \n[131] \"land rover\" \"land rover\" \"land rover\" \"land rover\" \"lincoln\"   \n[136] \"lincoln\"    \"lincoln\"    \"mercury\"    \"mercury\"    \"mercury\"   \n[141] \"mercury\"    \"nissan\"     \"nissan\"     \"nissan\"     \"nissan\"    \n[146] \"nissan\"     \"nissan\"     \"nissan\"     \"nissan\"     \"nissan\"    \n[151] \"nissan\"     \"nissan\"     \"nissan\"     \"nissan\"     \"pontiac\"   \n[156] \"pontiac\"    \"pontiac\"    \"pontiac\"    \"pontiac\"    \"subaru\"    \n[161] \"subaru\"     \"subaru\"     \"subaru\"     \"subaru\"     \"subaru\"    \n[166] \"subaru\"     \"subaru\"     \"subaru\"     \"subaru\"     \"subaru\"    \n[171] \"subaru\"     \"subaru\"     \"subaru\"     \"toyota\"     \"toyota\"    \n[176] \"toyota\"     \"toyota\"     \"toyota\"     \"toyota\"     \"toyota\"    \n[181] \"toyota\"     \"toyota\"     \"toyota\"     \"toyota\"     \"toyota\"    \n[186] \"toyota\"     \"toyota\"     \"toyota\"     \"toyota\"     \"toyota\"    \n[191] \"toyota\"     \"toyota\"     \"toyota\"     \"toyota\"     \"toyota\"    \n[196] \"toyota\"     \"toyota\"     \"toyota\"     \"toyota\"     \"toyota\"    \n[201] \"toyota\"     \"toyota\"     \"toyota\"     \"toyota\"     \"toyota\"    \n[206] \"toyota\"     \"toyota\"     \"volkswagen\" \"volkswagen\" \"volkswagen\"\n[211] \"volkswagen\" \"volkswagen\" \"volkswagen\" \"volkswagen\" \"volkswagen\"\n[216] \"volkswagen\" \"volkswagen\" \"volkswagen\" \"volkswagen\" \"volkswagen\"\n[221] \"volkswagen\" \"volkswagen\" \"volkswagen\" \"volkswagen\" \"volkswagen\"\n[226] \"volkswagen\" \"volkswagen\" \"volkswagen\" \"volkswagen\" \"volkswagen\"\n[231] \"volkswagen\" \"volkswagen\" \"volkswagen\" \"volkswagen\"\n```\n:::\n:::\n\n\n\n### Packages\n\nWhilst a lot of the functions you will need are in the *base* code that is active by default, you will at times need extra packages of code to do more powerful things. A commonly used package is ggplot2 [https://ggplot2.tidyverse.org/], which allows you to make ***beautiful*** figures in R. To use ggplot2 use need to **install** it and then load it from the **library**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(ggplot2)){install.packages(\"ggplot2\")}\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ggplot2\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\nNow that you have a package for making beautiful plots, lets learn about \"intelligent copy and paste\" to make use of it.\n\n### Intelligent copy and paste\n\nPeople experienced with coding ***do not write all their code from memory***. They often copy and paste code from the internet and/or from their old scripts. So, assuming you've installed and loaded ggplot2 as described above, lets copy and paste code from their website (as of September 2022; https://ggplot2.tidyverse.org/)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, hwy, colour = class)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](fundamentals_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\nGood news is that we have a nice looking figure. But now we need to work out how to understand the code we've copied so that you can apply it to your own scripts. There's a lot to unpack, so making the code more **vertical** can help you break it down and comment it out. Using the below and a description of the mpg dataframe (https://ggplot2.tidyverse.org/reference/mpg.html), can you comment it out\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(             # R will keep looking at your code until all the open brackets have been closed)\n  mpg,              #\n  aes(              #\n    displ,          #\n    hwy,            #\n    colour = class  #\n  )\n) +                 # R will look to the next line if you end a line with +\ngeom_point()        #\n```\n\n::: {.cell-output-display}\n![](fundamentals_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nHere's how I would comment it out:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  mpg,              # dataframe\n  aes(              # aesthetic properties\n    displ,          # x-axis\n    hwy,            # y-axis\n    colour = class  # which column I will base the color on (often \"color\" is safer spelling in code)\n  )\n) + \ngeom_point()        # what I would like drawn on (as opposed to boxplots, lines, etc.)\n```\n\n::: {.cell-output-display}\n![](fundamentals_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n**Formatting code like above to be clearer to read is useful when sharing your scripts with other researchers so that they can understand it!**\n\n\nNow to understand the above code, try running it after changing lines. For example, what happens if you change the x-axis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  mpg,              # dataframe\n  aes(              # aesthetic properties\n    cty,            # x-axis - updated\n    hwy,            # y-axis\n    colour = class  # which column I will base the color on (often \"color\" is safer spelling in code)\n  )\n) + \ngeom_point()        # what I would like drawn on (as opposed to boxplots, lines, etc.\n```\n\n::: {.cell-output-display}\n![](fundamentals_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\nTo make beautiful figures in R, you can largely google the type of plot you want, copy the example code that the website has, and then swap in the relevant features for your plot. This principle of copying and pasting code, (making it vertical to make it legible is not necessary, but can be helpful), and then editing it to work for your own script is an **essential skill** to speed up your coding.",
    "supporting": [
      "fundamentals_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}